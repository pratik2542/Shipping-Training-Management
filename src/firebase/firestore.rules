rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if user is admin
    function isAdmin() {
      return request.auth != null && request.auth.token.email in ['pratikmak2542@gmail.com'];
    }

    // Helper function to check if user is manager
    function isManager() {
      return request.auth != null && exists(/databases/$(database)/documents/managers/$(request.auth.token.email));
    }

    // Helper function to check if user is admin or manager
    function isAdminOrManager() {
      return isAdmin() || isManager();
    }

    match /shipments/{document=**} {
      allow read, write: if request.auth != null;
    }
    
    match /test_shipments/{document=**} {
      allow read, write: if request.auth != null;
    }
    
    match /managers/{email} {
      allow read: if request.auth != null;
      // Only admin can write (add/remove) managers
      allow write: if isAdmin(); 
    }
    
    match /item_master/{document=**} {
      allow read: if request.auth != null;
      // Allow write for admins or managers
      allow write: if request.auth != null && isAdminOrManager();
    }
    
    match /test_item_master/{document=**} {
      allow read, write: if request.auth != null;
    }
    
    match /test_users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
    
    match /usersData/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
    
    match /userRequests/{requestId} {
      // Allow anyone to create a request (register)
      allow create: if true; // Assuming registration is open
      // Allow authenticated users to read their own request status
      allow read: if request.auth != null && resource.data.email == request.auth.token.email;
      // Allow admins to read, update (approve/reject/change access), and delete any request
      // Specifically allow updating 'status', 'approvedAt', 'rejectedAt', 'accessLevel', 'lastUpdatedByAdmin', 'lastUpdatedAt' by admin
      allow read, delete: if request.auth != null && isAdmin();
      allow update: if request.auth != null && isAdmin() &&
                       request.resource.data.diff(resource.data).affectedKeys().hasOnly([
                         'status', 'approvedAt', 'rejectedAt', 'accessLevel', 'lastUpdatedByAdmin', 'lastUpdatedAt'
                       ]);
    }

    // Rules for Self Training Records
    match /selfTrainings/{trainingId} {
      // Allow create if user is authenticated and setting their own userId
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
      
      // Allow read if user owns the record OR user is admin/manager
      allow read: if request.auth != null && (resource.data.userId == request.auth.uid || isAdminOrManager());
      
      // Allow update:
      // 1. If user owns the record AND status is 'pending' 
      // 2. OR if user is admin/manager AND is updating a record NOT their own 
      //    (This allows updating status and adding actor details during approval/rejection)
      allow update: if request.auth != null && 
                      ( 
                        (resource.data.userId == request.auth.uid && resource.data.status == 'pending') || 
                        (isAdminOrManager() && resource.data.userId != request.auth.uid) // This rule allows managers/admins to update necessary fields
                      );
                      
      // Allow delete only for admin
      allow delete: if isAdmin();
    }

    // Rules for Test Self Training Records
    match /test_selfTrainings/{trainingId} {
      // Allow full access for any authenticated user (typical for test data)
      allow read, write: if request.auth != null;
    }

    // Rules for SOPs
    match /sops/{sopId} {
      // Allow read for any authenticated user
      allow read: if request.auth != null; 
      // Allow write (create, update, delete) for admins or managers
      allow write: if request.auth != null && (isAdmin() || isManager());
    }

    // Rules for Test SOPs
    match /test_sops/{sopId} {
      // Allow full access for any authenticated user
      allow read, write: if request.auth != null;
    }

    // Default deny all other access to prevent unintended access
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
