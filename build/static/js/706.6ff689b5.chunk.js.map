{"version":3,"file":"static/js/706.6ff689b5.chunk.js","mappings":"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","sources":["components/Login.js","config/api.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { Paper, Avatar, Box, TextField, Button, Typography, Container, Divider } from '@mui/material';\r\nimport { signInWithEmailAndPassword } from 'firebase/auth';\r\nimport { auth } from '../firebase/config';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport LockOutlinedIcon from '@mui/icons-material/LockOutlined';\r\nimport { createUserWithEmailAndPassword } from 'firebase/auth';\r\nimport { testAuth } from '../firebase/testConfig';\r\nimport { collection, addDoc, query, where, getDocs } from 'firebase/firestore';\r\nimport { db } from '../firebase/config';\r\nimport HelpIcon from '@mui/icons-material/Help';\r\nimport { Tooltip, IconButton } from '@mui/material';\r\nimport CircularProgress from '@mui/material/CircularProgress';\r\nimport { getApiUrl } from '../config/api';\r\nimport SearchIcon from '@mui/icons-material/Search';\r\nimport LockResetIcon from '@mui/icons-material/LockReset';\r\n\r\nconst ADMIN_EMAILS = ['pratikmak2542@gmail.com']; // Add your admin emails here\r\n\r\nconst Login = () => {\r\n  // Add this console log to verify which API URL is being used\r\n  console.log('API URL:', process.env.REACT_APP_API_URL);\r\n\r\n  const [email, setEmail] = useState('');\r\n  const [password, setPassword] = useState('');\r\n  const [name, setName] = useState('');\r\n  const [error, setError] = useState('');\r\n  const [showTestSignup, setShowTestSignup] = useState(false);\r\n  const [showRegister, setShowRegister] = useState(false);\r\n  const [isTestUser, setIsTestUser] = useState(false);\r\n  const [isSubmitting, setIsSubmitting] = useState(false);\r\n  const navigate = useNavigate();\r\n\r\n  const buttonStyles = {\r\n    py: 1.5,\r\n    fontSize: '1rem',\r\n    fontWeight: 500,\r\n    height: '48px',\r\n    textTransform: 'none', // Prevents all-caps\r\n    letterSpacing: '0.3px',\r\n    '&:hover': {\r\n      transform: 'translateY(-2px)',\r\n      transition: 'transform 0.2s',\r\n    }\r\n  };\r\n\r\n  const outlinedButtonStyles = {\r\n    ...buttonStyles,\r\n    borderColor: 'primary.main',\r\n    '&:hover': {\r\n      ...buttonStyles['&:hover'],\r\n      borderColor: 'primary.dark',\r\n      backgroundColor: 'rgba(25, 118, 210, 0.04)'\r\n    }\r\n  };\r\n\r\n  const utilityButtonStyles = {\r\n    ...buttonStyles,\r\n    height: '42px',\r\n    backgroundColor: 'white',\r\n    color: 'primary.main',\r\n    border: '1px solid',\r\n    borderColor: 'primary.light',\r\n    fontWeight: 400,\r\n    fontSize: '0.9rem',\r\n    boxShadow: '0 2px 4px rgba(0,0,0,0.05)',\r\n    '& .MuiButton-startIcon': {\r\n      marginRight: 1\r\n    },\r\n    '&:hover': {\r\n      backgroundColor: 'primary.main',\r\n      color: 'white',\r\n      boxShadow: '0 4px 8px rgba(0,0,0,0.1)',\r\n      transform: 'translateY(-2px)',\r\n      transition: 'all 0.2s ease-in-out'\r\n    },\r\n    minWidth: 130, // Ensure enough width for text\r\n    whiteSpace: 'nowrap', // Prevent text wrapping\r\n  };\r\n\r\n  const sendAdminNotification = async (userData) => {\r\n    console.log('Sending notification data:', userData);\r\n    \r\n    try {\r\n      const response = await fetch(getApiUrl('notify-admin'), {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({\r\n          name: userData.name,\r\n          email: userData.email\r\n        })\r\n      });\r\n\r\n      if (!response.ok) {\r\n        const errorData = await response.json();\r\n        throw new Error(errorData.error || 'Failed to send notification');\r\n      }\r\n\r\n      const data = await response.json();\r\n      console.log('Server response:', data);\r\n      return data;\r\n    } catch (error) {\r\n      console.error('Notification error:', error);\r\n      throw new Error('Failed to send registration notification. Please try again.');\r\n    }\r\n  };\r\n\r\n  const handleRegister = async (e) => {\r\n    e.preventDefault();\r\n    if (isSubmitting) return; // Prevent multiple submissions\r\n\r\n    setIsSubmitting(true); // Start loading\r\n    setError(''); // Clear previous errors\r\n\r\n    try {\r\n      // First check if the email is already registered in Firebase\r\n      const apiKey = process.env.REACT_APP_FIREBASE_API_KEY || \"AIzaSyBLAlnwwRasaBO88OsM8GsJ0os-8bwAT08\";\r\n      const emailCheckEndpoint = `https://identitytoolkit.googleapis.com/v1/accounts:createAuthUri?key=${apiKey}`;\r\n      \r\n      const emailCheckResponse = await fetch(emailCheckEndpoint, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify({\r\n          identifier: email,\r\n          continueUri: window.location.href\r\n        })\r\n      });\r\n      \r\n      const emailCheckData = await emailCheckResponse.json();\r\n      \r\n      // If the email exists in Firebase Auth, don't allow re-registration\r\n      if (emailCheckData.registered === true) {\r\n        setError('An account with this email already exists. Please log in instead.');\r\n        setIsSubmitting(false);\r\n        return;\r\n      }\r\n      \r\n      // Check if user already has a pending request\r\n      const existingRequestQuery = query(\r\n        collection(db, 'userRequests'),\r\n        where('email', '==', email)\r\n      );\r\n      \r\n      const existingRequestDocs = await getDocs(existingRequestQuery);\r\n      \r\n      // Check if there's any request (pending, approved, or rejected)\r\n      if (!existingRequestDocs.empty) {\r\n        // Find if there's an approved request\r\n        const approvedRequest = existingRequestDocs.docs.find(doc => \r\n          doc.data().status === 'approved'\r\n        );\r\n        \r\n        // Find if there's a pending request\r\n        const pendingRequest = existingRequestDocs.docs.find(doc => \r\n          doc.data().status === 'pending'\r\n        );\r\n        \r\n        if (approvedRequest) {\r\n          setError('This email is already registered and approved. Please log in instead.');\r\n          setIsSubmitting(false);\r\n          return;\r\n        }\r\n        \r\n        if (pendingRequest) {\r\n          setError('You already have a pending registration request. Please wait for approval.');\r\n          setIsSubmitting(false);\r\n          return;\r\n        }\r\n        \r\n        // If only rejected requests exist, allow to re-register\r\n      }\r\n\r\n      const userRequest = {\r\n        name,\r\n        email,\r\n        status: 'pending',\r\n        createdAt: new Date().toISOString(),\r\n        isTestUser: false\r\n      };\r\n\r\n      // Try to send notification first\r\n      await sendAdminNotification(userRequest);\r\n      \r\n      // Only add to Firebase if notification succeeds\r\n      await addDoc(collection(db, 'userRequests'), userRequest);\r\n\r\n      alert('Registration request submitted successfully.');\r\n      navigate('/pending-status', { state: { email } });\r\n      \r\n    } catch (error) {\r\n      console.error('Registration failed:', error);\r\n      setError(`Registration failed: ${error.message}`);\r\n    } finally {\r\n      setIsSubmitting(false); // End loading\r\n    }\r\n  };\r\n\r\n  const handleLogin = async (e) => {\r\n    e.preventDefault();\r\n    try {\r\n      // Sign in user\r\n      await signInWithEmailAndPassword(auth, email, password);\r\n      \r\n      // If using temporary password, redirect to reset\r\n      if (password === 'tempPassword123') {\r\n        navigate('/reset-password', { state: { fromTempPassword: true } });\r\n        return;\r\n      }\r\n\r\n      // Check if user is admin\r\n      if (ADMIN_EMAILS.includes(email)) {\r\n        // Store admin email for later use in auth operations\r\n        localStorage.setItem('adminEmail', email);\r\n        localStorage.setItem('isAdmin', 'true');\r\n        \r\n        // Check for pending requests\r\n        const pendingQuery = query(\r\n          collection(db, 'userRequests'),\r\n          where('status', '==', 'pending')\r\n        );\r\n        const pendingSnapshot = await getDocs(pendingQuery);\r\n        \r\n        // Only redirect to verify page if there are pending requests\r\n        if (pendingSnapshot.size > 0) {\r\n          navigate('/admin/verify');\r\n        } else {\r\n          navigate('/dashboard');\r\n        }\r\n        return;\r\n      }\r\n\r\n      // For test users, use test auth and mark them as test users\r\n      if (isTestUser) {\r\n        await signInWithEmailAndPassword(testAuth, email, password);\r\n        localStorage.setItem('isTestUser', 'true');\r\n      } else {\r\n        // Sign in and get user credentials\r\n        await signInWithEmailAndPassword(auth, email, password);\r\n        \r\n        // Check if user is approved\r\n        const userQuery = query(\r\n          collection(db, 'userRequests'),\r\n          where('email', '==', email),\r\n          where('status', '==', 'pending')\r\n        );\r\n        const userSnapshot = await getDocs(userQuery);\r\n        \r\n        if (!userSnapshot.empty) {\r\n          await auth.signOut(); // Sign out if not approved\r\n          setError('Your account is pending approval. Please wait for admin verification.');\r\n          return;\r\n        }\r\n\r\n        localStorage.removeItem('isAdmin');\r\n        localStorage.removeItem('isTestUser');\r\n        navigate('/dashboard');\r\n      }\r\n    } catch (error) {\r\n      setError(error.message);\r\n    }\r\n  };\r\n\r\n  const handleTestSignup = async (e) => {\r\n    e.preventDefault();\r\n    try {\r\n      // Always create test users with testAuth and mark them as test users\r\n      await createUserWithEmailAndPassword(testAuth, email, password);\r\n      localStorage.setItem('isTestUser', 'true');\r\n      navigate('/dashboard');\r\n    } catch (error) {\r\n      setError(error.message);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Container component=\"main\" maxWidth=\"xs\">\r\n      <Paper\r\n        elevation={3}\r\n        sx={{\r\n          marginTop: 8,\r\n          padding: 4,\r\n          display: 'flex',\r\n          flexDirection: 'column',\r\n          alignItems: 'center',\r\n        }}\r\n      >\r\n        <Avatar sx={{ m: 1, bgcolor: 'primary.main' }}>\r\n          <LockOutlinedIcon />\r\n        </Avatar>\r\n        <Typography component=\"h1\" variant=\"h5\" sx={{ mb: 3 }}>\r\n          {showRegister ? 'Register' : showTestSignup ? 'Create Test Account' : 'Sign in'}\r\n        </Typography>\r\n        {error && (\r\n          <Typography color=\"error\" sx={{ mb: 2 }}>\r\n            {error}\r\n          </Typography>\r\n        )}\r\n        <Box component=\"form\" onSubmit={showRegister ? handleRegister : showTestSignup ? handleTestSignup : handleLogin} sx={{ mt: 1 }}>\r\n          {showRegister ? (\r\n            <>\r\n              <TextField\r\n                margin=\"normal\"\r\n                required\r\n                fullWidth\r\n                label=\"Full Name\"\r\n                value={name}\r\n                onChange={(e) => setName(e.target.value)}\r\n                sx={{ mb: 2 }}\r\n              />\r\n              <Box sx={{ position: 'relative' }}>\r\n                <TextField\r\n                  margin=\"normal\"\r\n                  required\r\n                  fullWidth\r\n                  label=\"Email Address\"\r\n                  value={email}\r\n                  onChange={(e) => setEmail(e.target.value)}\r\n                  sx={{ mb: 3 }}\r\n                />\r\n                <Tooltip \r\n                  title=\"After your registration is approved, you'll receive an email with a temporary password to log in.\"\r\n                  arrow\r\n                  placement=\"top\"\r\n                >\r\n                  <IconButton \r\n                    sx={{ \r\n                      position: 'absolute', \r\n                      right: -40, \r\n                      top: '50%', \r\n                      transform: 'translateY(-50%)'\r\n                    }}\r\n                  >\r\n                    <HelpIcon color=\"primary\" fontSize=\"small\" />\r\n                  </IconButton>\r\n                </Tooltip>\r\n              </Box>\r\n              <Button\r\n                type=\"submit\"\r\n                fullWidth\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                sx={{ ...buttonStyles, mt: 3, mb: 2 }}\r\n                disabled={isSubmitting}\r\n              >\r\n                {isSubmitting ? (\r\n                  <Box sx={{ display: 'flex', alignItems: 'center' }}>\r\n                    <CircularProgress size={24} sx={{ mr: 1 }} />\r\n                    Registering...\r\n                  </Box>\r\n                ) : (\r\n                  'Register'\r\n                )}\r\n              </Button>\r\n              <Button\r\n                fullWidth\r\n                variant=\"outlined\"\r\n                onClick={() => {\r\n                  setShowRegister(false);\r\n                  setName('');\r\n                }}\r\n                sx={{ ...outlinedButtonStyles, mt: 1 }}\r\n              >\r\n                Back to Login\r\n              </Button>\r\n            </>\r\n          ) : (\r\n            <>\r\n              <TextField\r\n                margin=\"normal\"\r\n                required\r\n                fullWidth\r\n                label=\"Email Address\"\r\n                value={email}\r\n                onChange={(e) => setEmail(e.target.value)}\r\n                sx={{ mb: 2 }}\r\n              />\r\n              <TextField\r\n                margin=\"normal\"\r\n                required\r\n                fullWidth\r\n                label=\"Password\"\r\n                type=\"password\"\r\n                value={password}\r\n                onChange={(e) => setPassword(e.target.value)}\r\n                sx={{ mb: 3 }}\r\n              />\r\n              {!showTestSignup && !showRegister ? (\r\n                <>\r\n                  <Button\r\n                    type=\"submit\"\r\n                    fullWidth\r\n                    variant=\"contained\"\r\n                    sx={buttonStyles}\r\n                  >\r\n                    Sign In\r\n                  </Button>\r\n                  \r\n                  {/* Updated utility buttons container with adjusted spacing */}\r\n                  <Box sx={{ \r\n                    display: 'flex', \r\n                    justifyContent: 'space-between', // Use space-between instead of gap\r\n                    mt: 3, \r\n                    mb: 3,\r\n                    width: '100%'\r\n                  }}>\r\n                    <Button\r\n                      sx={{\r\n                        ...utilityButtonStyles,\r\n                        flex: '1 1 45%', // Allocate proper space\r\n                        mr: 1 // Add margin right\r\n                      }}\r\n                      onClick={() => navigate('/check-status')}\r\n                      startIcon={<SearchIcon sx={{ fontSize: 20 }} />}\r\n                    >\r\n                      Check Status\r\n                    </Button>\r\n                    <Button\r\n                      sx={{\r\n                        ...utilityButtonStyles,\r\n                        flex: '1 1 45%', // Allocate proper space\r\n                        ml: 1 // Add margin left\r\n                      }}\r\n                      onClick={() => navigate('/forgot-password')}\r\n                      startIcon={<LockResetIcon sx={{ fontSize: 20 }} />}\r\n                    >\r\n                      Reset Password\r\n                    </Button>\r\n                  </Box>\r\n\r\n                  <Divider sx={{ my: 2 }}>\r\n                    <Typography variant=\"body2\" color=\"text.secondary\">\r\n                      or\r\n                    </Typography>\r\n                  </Divider>\r\n\r\n                  <Button\r\n                    fullWidth\r\n                    variant=\"outlined\"\r\n                    onClick={() => setShowRegister(true)}\r\n                    sx={{ ...outlinedButtonStyles, mb: 1 }}\r\n                  >\r\n                    Create Account\r\n                  </Button>\r\n                  <Button\r\n                    fullWidth\r\n                    variant=\"outlined\"\r\n                    onClick={() => {\r\n                      setShowTestSignup(true);\r\n                      setIsTestUser(true);\r\n                    }}\r\n                    sx={outlinedButtonStyles}\r\n                  >\r\n                    Create Test Account\r\n                  </Button>\r\n                </>\r\n              ) : (\r\n                <>\r\n                  <Button\r\n                    type=\"submit\"\r\n                    fullWidth\r\n                    variant=\"contained\"\r\n                    color=\"warning\"\r\n                    sx={{ ...buttonStyles, mt: 3, mb: 2 }}\r\n                  >\r\n                    Create Test Account\r\n                  </Button>\r\n                  <Button\r\n                    fullWidth\r\n                    variant=\"outlined\"\r\n                    onClick={() => {\r\n                      setShowTestSignup(false);\r\n                      setIsTestUser(false);\r\n                    }}\r\n                    sx={{ ...outlinedButtonStyles, mt: 1 }}\r\n                  >\r\n                    Back to Login\r\n                  </Button>\r\n                </>\r\n              )}\r\n            </>\r\n          )}\r\n        </Box>\r\n      </Paper>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default Login;","const API_URL = process.env.NODE_ENV === 'production' \r\n  ? 'https://shipping-management.vercel.app'  // Production API URL\r\n  : 'http://localhost:5000/api/';  // Development API URL\r\n\r\nexport const getApiUrl = (endpoint) => {\r\n  const url = `${API_URL}${endpoint}`;\r\n  console.log('API Request to:', url); // Debug log\r\n  return url;\r\n};\r\n"],"names":["ADMIN_EMAILS","Login","console","log","process","REACT_APP_API_URL","email","setEmail","useState","password","setPassword","name","setName","error","setError","showTestSignup","setShowTestSignup","showRegister","setShowRegister","isTestUser","setIsTestUser","isSubmitting","setIsSubmitting","navigate","useNavigate","buttonStyles","py","fontSize","fontWeight","height","textTransform","letterSpacing","transform","transition","outlinedButtonStyles","borderColor","backgroundColor","utilityButtonStyles","color","border","boxShadow","marginRight","minWidth","whiteSpace","sendAdminNotification","async","userData","response","fetch","endpoint","url","getApiUrl","method","headers","body","JSON","stringify","ok","errorData","json","Error","data","_jsx","Container","component","maxWidth","children","_jsxs","Paper","elevation","sx","marginTop","padding","display","flexDirection","alignItems","Avatar","m","bgcolor","LockOutlinedIcon","Typography","variant","mb","Box","onSubmit","e","preventDefault","emailCheckEndpoint","emailCheckResponse","identifier","continueUri","window","location","href","registered","existingRequestQuery","query","collection","db","where","existingRequestDocs","getDocs","empty","approvedRequest","docs","find","doc","status","pendingRequest","userRequest","createdAt","Date","toISOString","addDoc","alert","state","message","createUserWithEmailAndPassword","testAuth","localStorage","setItem","signInWithEmailAndPassword","auth","fromTempPassword","includes","pendingQuery","size","userQuery","signOut","removeItem","mt","_Fragment","TextField","margin","required","fullWidth","label","value","onChange","target","position","Tooltip","title","arrow","placement","IconButton","right","top","HelpIcon","Button","type","disabled","CircularProgress","mr","onClick","justifyContent","width","flex","startIcon","SearchIcon","ml","LockResetIcon","Divider","my"],"sourceRoot":""}