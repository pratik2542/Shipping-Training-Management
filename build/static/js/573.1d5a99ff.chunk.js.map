{"version":3,"file":"static/js/573.1d5a99ff.chunk.js","mappings":"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","sources":["components/ShippingForm.js"],"sourcesContent":["import React, { useState, useEffect, useRef, useCallback } from 'react';\r\nimport {\r\n  Box,\r\n  TextField,\r\n  Button,\r\n  Container,\r\n  Typography,\r\n  Grid,\r\n  Paper,\r\n  Input,\r\n  Dialog,\r\n  DialogTitle,\r\n  DialogContent,\r\n  DialogActions,\r\n} from '@mui/material';\r\nimport { collection, addDoc, doc, getDoc, updateDoc, query, orderBy, limit, getDocs } from 'firebase/firestore';\r\nimport { db } from '../firebase/config';\r\nimport { testDb } from '../firebase/testConfig';\r\nimport { useNavigate, useLocation } from 'react-router-dom';\r\nimport SignaturePad from 'react-signature-canvas';\r\nimport { MenuItem, FormControl, InputLabel, Select, FormControlLabel, Checkbox, IconButton } from '@mui/material';\r\nimport ClearIcon from '@mui/icons-material/Clear';\r\n\r\nconst SignatureDialog = ({ open, onClose, onSave, title }) => {\r\n  const sigPadRef = useRef(null);\r\n\r\n  const handleSave = () => {\r\n    if (sigPadRef.current) {\r\n      const signatureData = sigPadRef.current.toDataURL();\r\n      onSave(signatureData);\r\n      onClose();\r\n    }\r\n  };\r\n\r\n  const handleClear = () => {\r\n    if (sigPadRef.current) {\r\n      sigPadRef.current.clear();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Dialog open={open} onClose={onClose} maxWidth=\"sm\" fullWidth>\r\n      <DialogTitle>{title}</DialogTitle>\r\n      <DialogContent>\r\n        <Box\r\n          sx={{\r\n            border: '1px solid #ccc',\r\n            borderRadius: 1,\r\n            mt: 2,\r\n            backgroundColor: '#fff',\r\n          }}\r\n        >\r\n          <SignaturePad\r\n            ref={sigPadRef}\r\n            canvasProps={{\r\n              width: 500,\r\n              height: 200,\r\n              className: 'signature-canvas'\r\n            }}\r\n          />\r\n        </Box>\r\n      </DialogContent>\r\n      <DialogActions>\r\n        <Button onClick={handleClear} color=\"secondary\">\r\n          Clear\r\n        </Button>\r\n        <Button onClick={onClose}>\r\n          Cancel\r\n        </Button>\r\n        <Button onClick={handleSave} variant=\"contained\">\r\n          Save Signature\r\n        </Button>\r\n      </DialogActions>\r\n    </Dialog>\r\n  );\r\n};\r\n\r\nconst ShippingForm = () => {\r\n  const navigate = useNavigate();\r\n  const location = useLocation();\r\n  const [isEditMode, setIsEditMode] = useState(false);\r\n  const [recordId, setRecordId] = useState(null);\r\n  const [formData, setFormData] = useState({\r\n    shipmentCode: '',  // Replace dpNumber with shipmentCode\r\n    shipmentDate: '',\r\n    itemNo: '',\r\n    itemName: '',\r\n    lotNumber: '',\r\n    quantities: '',\r\n    receiverName: '',\r\n    receiverSign: '',\r\n    receiverDate: '',\r\n    inspectorName: '',\r\n    inspectorSign: '',\r\n    inspectorDate: '',\r\n    approverName: '',\r\n    approverSign: '',\r\n    approverDate: '',\r\n    attachmentUrl: '',     // This will store base64 string\r\n    attachmentName: '',     // This will store the file name\r\n    qualifiedManufacturer: '',\r\n    landingBillNumber: '',\r\n    remainingQuantity: 0,\r\n    unit: '',\r\n    expiryDate: null,\r\n    damageToPackaging: false,\r\n    damageToProduct: false,\r\n    totalQuantityAccepted: 0,\r\n    damageNotes: '',\r\n    vendor: '', // Add new vendor field\r\n    transportation: '', // Add new transportation field\r\n  });\r\n  const [signatureDialogOpen, setSignatureDialogOpen] = useState(false);\r\n  const [currentSignatureField, setCurrentSignatureField] = useState('');\r\n  const [recordFromDatabase, setRecordFromDatabase] = useState(null);\r\n\r\n  const getDbInstance = () => {\r\n    const isTestUser = localStorage.getItem('isTestUser') === 'true';\r\n    return isTestUser ? testDb : db;\r\n  };\r\n\r\n  const getCollectionName = () => {\r\n    const isTestUser = localStorage.getItem('isTestUser') === 'true';\r\n    return isTestUser ? 'test_shipments' : 'shipments';\r\n  };\r\n\r\n  const generateShipmentCode = useCallback((itemNo, lotNumber, shipmentDate) => {\r\n    if (!itemNo || !lotNumber || !shipmentDate) return '';\r\n    \r\n    // Remove any spaces and special characters\r\n    const cleanItemNo = itemNo.replace(/[^a-zA-Z0-9]/g, '');\r\n    const cleanLotNo = lotNumber.replace(/[^a-zA-Z0-9]/g, '');\r\n    const dateStr = shipmentDate.replace(/-/g, '');\r\n\r\n    // Combine the values (using first 4 chars of each if available)\r\n    const code = `${cleanItemNo.slice(0, 4)}-${cleanLotNo.slice(0, 4)}-${dateStr}`;\r\n    return code.toUpperCase();\r\n  }, []);\r\n\r\n  const handleBack = () => {\r\n    try {\r\n      navigate('/records');\r\n    } catch (error) {\r\n      console.error('Navigation error:', error);\r\n      // Fallback navigation\r\n      window.location.href = '/records';\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    const loadExistingRecord = async () => {\r\n      try {\r\n        const dbInstance = getDbInstance();\r\n        const collectionName = getCollectionName();\r\n        const searchParams = new URLSearchParams(location.search);\r\n        const editId = searchParams.get('edit'); // This is the document ID\r\n        \r\n        if (editId) {\r\n          console.log('Loading record with ID:', editId);\r\n          const docRef = doc(dbInstance, collectionName, editId);\r\n          const docSnap = await getDoc(docRef);\r\n          \r\n          if (docSnap.exists()) {\r\n            const data = docSnap.data();\r\n            console.log('Loaded record data:', data);\r\n            \r\n            setIsEditMode(true);\r\n            setRecordId(editId);\r\n            setFormData({\r\n              id: data.id || '', // This is our auto-generated numeric ID\r\n              shipmentCode: data.shipmentCode || '', // Update this line\r\n              shipmentDate: data.shipmentDate || '',\r\n              itemNo: data.itemNo || '',\r\n              itemName: data.itemName || '',\r\n              lotNumber: data.lotNumber || '',\r\n              quantities: data.quantities || '',\r\n              receiverName: data.receiverName || '',\r\n              receiverSign: data.receiverSign || '',\r\n              receiverDate: data.receiverDate || '',\r\n              inspectorName: data.inspectorName || '',\r\n              inspectorSign: data.inspectorSign || '',\r\n              inspectorDate: data.inspectorDate || '',\r\n              approverName: data.approverName || '',\r\n              approverSign: data.approverSign || '',\r\n              approverDate: data.approverDate || '',\r\n              attachmentUrl: data.attachmentUrl || '',\r\n              attachmentName: data.attachmentName || '',\r\n              qualifiedManufacturer: data.qualifiedManufacturer || '',\r\n              landingBillNumber: data.landingBillNumber || '',\r\n              remainingQuantity: data.remainingQuantity || 0,\r\n              unit: data.unit || '',\r\n              expiryDate: data.expiryDate || null,\r\n              damageToPackaging: data.damageToPackaging || false,\r\n              damageToProduct: data.damageToProduct || false,\r\n              totalQuantityAccepted: data.totalQuantityAccepted || 0,\r\n              damageNotes: data.damageNotes || '',\r\n              vendor: data.vendor || '', // Add new vendor field\r\n              transportation: data.transportation || '', // Add new transportation field\r\n            });\r\n            setRecordFromDatabase(data);\r\n          } else {\r\n            console.error('No document found with ID:', editId);\r\n            alert('Record not found');\r\n            navigate('/records');\r\n          }\r\n        } else {\r\n          // New form - don't set any ID\r\n          setIsEditMode(false);\r\n          setRecordId(null);\r\n          setFormData({\r\n            shipmentCode: '',\r\n            shipmentDate: '',\r\n            itemNo: '',\r\n            itemName: '',\r\n            lotNumber: '',\r\n            quantities: '',\r\n            receiverName: '',\r\n            receiverSign: '',\r\n            receiverDate: '',\r\n            inspectorName: '',\r\n            inspectorSign: '',\r\n            inspectorDate: '',\r\n            approverName: '',\r\n            approverSign: '',\r\n            approverDate: '',\r\n            attachmentUrl: '',\r\n            attachmentName: '',\r\n            qualifiedManufacturer: '',\r\n            landingBillNumber: '',\r\n            remainingQuantity: 0,\r\n            unit: '',\r\n            expiryDate: null,\r\n            damageToPackaging: false,\r\n            damageToProduct: false,\r\n            totalQuantityAccepted: 0,\r\n            damageNotes: '',\r\n            vendor: '', // Add new vendor field\r\n            transportation: '', // Add new transportation field\r\n          });\r\n        }\r\n      } catch (error) {\r\n        console.error('Error loading record:', error);\r\n        alert('Error loading record');\r\n        navigate('/records');\r\n      }\r\n    };\r\n\r\n    loadExistingRecord();\r\n  }, [location.search, navigate]);\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    \r\n    try {\r\n      const isTestUser = localStorage.getItem('isTestUser') === 'true';\r\n      const dbInstance = isTestUser ? testDb : db;\r\n      const collectionName = isTestUser ? 'test_shipments' : 'shipments';\r\n\r\n      // Only generate new ID for new records, not for edits\r\n      let dataToSubmit = {\r\n        ...formData,\r\n        lastUpdated: new Date().toISOString(),\r\n        isTestData: isTestUser\r\n      };\r\n\r\n      if (!isEditMode) {\r\n        // Generate new ID only for new records\r\n        let nextId = 1;\r\n        if (!isTestUser) {\r\n          const q = query(\r\n            collection(db, 'shipments'),\r\n            orderBy('numericId', 'desc'),\r\n            limit(1)\r\n          );\r\n          \r\n          const querySnapshot = await getDocs(q);\r\n          if (!querySnapshot.empty) {\r\n            const lastDoc = querySnapshot.docs[0].data();\r\n            nextId = (parseInt(lastDoc.numericId) || 0) + 1;\r\n          }\r\n        }\r\n\r\n        // Add new ID fields only for new records\r\n        dataToSubmit = {\r\n          ...dataToSubmit,\r\n          id: nextId.toString(),\r\n          numericId: nextId,\r\n          uniqueId: `${nextId}-${Date.now()}`,\r\n          createdAt: new Date().toISOString()\r\n        };\r\n      }\r\n\r\n      // Validate required fields based on the stage\r\n      let requiredFields = ['shipmentDate', 'itemNo', 'itemName', 'lotNumber', 'quantities'];\r\n      \r\n      if (!isEditMode || !formData.receiverSign) {\r\n        requiredFields = [...requiredFields, 'receiverName'];\r\n      } else if (canModifyField('inspectorName')) {\r\n        requiredFields = [...requiredFields, 'inspectorName'];\r\n      } else if (canModifyField('approverName')) {\r\n        requiredFields = [...requiredFields, 'approverName'];\r\n      }\r\n      \r\n      const missingFields = requiredFields.filter(field => !formData[field]);\r\n      if (missingFields.length > 0) {\r\n        alert(`Please fill in all required fields: ${missingFields.join(', ')}`);\r\n        return;\r\n      }\r\n\r\n      // Set status based on signature state\r\n      const status = formData.approverSign ? 'Approved' : \r\n                    formData.inspectorSign ? 'Pending Approval' : \r\n                    formData.receiverSign ? 'Pending Inspection' : \r\n                    'Pending Shipment';\r\n\r\n      dataToSubmit = {\r\n        ...dataToSubmit,\r\n        status: status\r\n      };\r\n\r\n      // Save to database\r\n      if (isEditMode && recordId) {\r\n        await updateDoc(doc(dbInstance, collectionName, recordId), dataToSubmit);\r\n      } else {\r\n        await addDoc(collection(dbInstance, collectionName), dataToSubmit);\r\n      }\r\n\r\n      alert(`Form ${isEditMode ? 'updated' : 'submitted'} successfully!`);\r\n      navigate('/records');\r\n      \r\n    } catch (error) {\r\n      console.error('Error submitting form:', error);\r\n      const errorMessage = error?.message || 'Unknown error occurred';\r\n      alert(`Error submitting form: ${errorMessage}. Please try again.`);\r\n    }\r\n  };\r\n\r\n  const handleChange = (e) => {\r\n    const { name, value, type, checked } = e.target;\r\n    const newValue = type === 'checkbox' ? checked : value;\r\n\r\n    setFormData(prev => {\r\n      const updatedData = {\r\n        ...prev,\r\n        [name]: newValue\r\n      };\r\n\r\n      // Auto-calculate remaining quantity\r\n      if (name === 'quantities') {\r\n        updatedData.remainingQuantity = Number(value);\r\n        updatedData.totalQuantityAccepted = Number(value);\r\n      }\r\n\r\n      // Generate shipment code if all required fields are present\r\n      if (['itemNo', 'lotNumber', 'shipmentDate'].includes(name)) {\r\n        const shipmentCode = generateShipmentCode(\r\n          name === 'itemNo' ? value : updatedData.itemNo,\r\n          name === 'lotNumber' ? value : updatedData.lotNumber,\r\n          name === 'shipmentDate' ? value : updatedData.shipmentDate\r\n        );\r\n        updatedData.shipmentCode = shipmentCode;\r\n      }\r\n      \r\n      return updatedData;\r\n    });\r\n  };\r\n\r\n  const handleFileChange = (e) => {\r\n    const file = e.target.files[0];\r\n    if (file) {\r\n      if (file.type !== 'application/pdf') {\r\n        alert('Please upload only PDF files');\r\n        e.target.value = '';\r\n        return;\r\n      }\r\n      if (file.size > 1024 * 1024) {  // 1MB limit\r\n        alert('File size should be less than 1MB');\r\n        e.target.value = '';\r\n        return;\r\n      }\r\n\r\n      const reader = new FileReader();\r\n      reader.onload = () => {\r\n        setFormData(prev => ({\r\n          ...prev,\r\n          attachmentUrl: reader.result,\r\n          attachmentName: file.name\r\n        }));\r\n      };\r\n      reader.readAsDataURL(file);\r\n    }\r\n  };\r\n\r\n  const handleSignatureClick = (fieldName) => {\r\n    setCurrentSignatureField(fieldName);\r\n    setSignatureDialogOpen(true);\r\n  };\r\n\r\n  const handleSignatureSave = (signature) => {\r\n    const currentDate = new Date().toISOString().split('T')[0];\r\n    const dateField = currentSignatureField.replace('Sign', 'Date');\r\n    \r\n    setFormData(prev => ({\r\n      ...prev,\r\n      [currentSignatureField]: signature,\r\n      [dateField]: currentDate\r\n    }));\r\n    \r\n    setSignatureDialogOpen(false);\r\n    setCurrentSignatureField(null);\r\n  };\r\n\r\n\r\n  const canModifyField = (fieldName) => {\r\n     if (!isEditMode) {\r\n      return fieldName.startsWith('receiver');\r\n    }\r\n\r\n    const status = recordFromDatabase?.status || 'Pending Shipment';\r\n\r\n    switch (status) {\r\n      case 'Pending Shipment':\r\n        return fieldName.startsWith('receiver');\r\n        \r\n      case 'Pending Inspection':\r\n        // Only inspector fields are editable, receiver fields are read-only\r\n        return fieldName.startsWith('inspector');\r\n        \r\n      case 'Pending Approval':\r\n        // Only approver fields are editable, others are read-only\r\n        return fieldName.startsWith('approver');\r\n        \r\n      case 'Approved':\r\n        // Nothing is editable\r\n        return false;\r\n        \r\n      default:\r\n        return false;\r\n    }\r\n  };\r\n\r\n  const qualifiedManufacturer = [\r\n    'UPS',\r\n    'Amazon',\r\n    'Purolator',\r\n    'Canada Post',\r\n    'FedEx',\r\n    'DHL'\r\n  ];\r\n\r\n  const unitOptions = [\r\n    'KG',\r\n    'EA',\r\n    'Cylinder'\r\n  ];\r\n\r\n  // Add vendor options array with the new values\r\n  const vendorOptions = [\r\n    'Zomato',\r\n    'Swiggy',\r\n    'BlinkIt',\r\n    'Zepto'\r\n  ];\r\n\r\n  // Add new function to determine which sections to show\r\n  const shouldShowSection = (section) => {\r\n    // New form - only show receiver\r\n    if (!isEditMode) {\r\n      return section === 'receiver';\r\n    }\r\n\r\n    // Get current status from database record\r\n    const status = recordFromDatabase?.status || 'Pending Shipment';\r\n\r\n    // Show sections based on workflow progress\r\n    switch (status) {\r\n      case 'Pending Shipment':\r\n        return section === 'receiver';\r\n        \r\n      case 'Pending Inspection':\r\n        // Show both receiver (read-only) and inspector\r\n        return section === 'receiver' || section === 'inspector';\r\n        \r\n      case 'Pending Approval':\r\n        // Show all sections - receiver and inspector read-only, approver editable\r\n        return section === 'receiver' || section === 'inspector' || section === 'approver';\r\n        \r\n      case 'Approved':\r\n        // Show all sections as read-only\r\n        return section === 'receiver' || section === 'inspector' || section === 'approver';\r\n        \r\n      default:\r\n        return section === 'receiver';\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Container maxWidth=\"md\">\r\n      <Paper elevation={3} sx={{ p: 4, mt: 4 }}>\r\n        <Box sx={{ \r\n          display: 'flex', \r\n          flexDirection: { xs: 'column', sm: 'row' }, \r\n          justifyContent: 'space-between', \r\n          alignItems: { xs: 'stretch', sm: 'center' }, \r\n          gap: 2,\r\n          mb: 4 \r\n        }}>\r\n          <Box sx={{ \r\n            display: 'flex', \r\n            flexDirection: { xs: 'column', sm: 'row' }, \r\n            gap: 2,\r\n            width: { xs: '100%', sm: 'auto' } \r\n          }}>\r\n            <Button\r\n              fullWidth\r\n              variant=\"outlined\"\r\n              onClick={() => navigate('/dashboard')}\r\n            >\r\n              Dashboard\r\n            </Button>\r\n            <Button\r\n              fullWidth\r\n              variant=\"outlined\"\r\n              onClick={handleBack}\r\n            >\r\n              Back to Records\r\n            </Button>\r\n          </Box>\r\n          <Typography \r\n            variant=\"h4\" \r\n            sx={{ \r\n              textAlign: { xs: 'center', sm: 'right' },\r\n              color: 'primary.main',\r\n              fontSize: { xs: '1.5rem', sm: '2rem' }\r\n            }}\r\n          >\r\n            {isEditMode ? 'Edit Shipping Form' : 'New Shipping Form'}\r\n          </Typography>\r\n        </Box>\r\n        <Box component=\"form\" onSubmit={handleSubmit}>\r\n          <Grid container spacing={3}>\r\n            {/* Only show ID field if editing or after submission */}\r\n            {(isEditMode || formData.id) && (\r\n              <Grid item xs={12} sm={6}>\r\n                <TextField\r\n                  fullWidth\r\n                  disabled\r\n                  label=\"ID\"\r\n                  value={formData.id || ''}\r\n                />\r\n              </Grid>\r\n            )}\r\n\r\n            {/* Shipment Code */}\r\n            <Grid item xs={12} sm={6}>\r\n              <TextField\r\n                fullWidth\r\n                disabled\r\n                label=\"Shipment Code\"\r\n                value={formData.shipmentCode || ''}\r\n                helperText=\"Auto-generated from Item No, Lot No, and Date\"\r\n              />\r\n            </Grid>\r\n\r\n            {/* Shipment Date */}\r\n            <Grid item xs={12} sm={6}>\r\n              <TextField\r\n                fullWidth\r\n                required\r\n                type=\"date\"\r\n                name=\"shipmentDate\"\r\n                label=\"Shipment Date\"\r\n                InputLabelProps={{ shrink: true }}\r\n                value={formData.shipmentDate}\r\n                onChange={handleChange}\r\n              />\r\n            </Grid>\r\n\r\n            {/* Item Details */}\r\n            <Grid item xs={12} sm={6}>\r\n              <TextField\r\n                fullWidth\r\n                required\r\n                name=\"itemNo\"\r\n                label=\"Item Number\"\r\n                value={formData.itemNo}\r\n                onChange={handleChange}\r\n              />\r\n            </Grid>\r\n\r\n            <Grid item xs={12} sm={6}>\r\n              <TextField\r\n                fullWidth\r\n                required\r\n                name=\"itemName\"\r\n                label=\"Item Name\"\r\n                value={formData.itemName}\r\n                onChange={handleChange}\r\n              />\r\n            </Grid>\r\n\r\n            <Grid item xs={12} sm={6}>\r\n              <TextField\r\n                fullWidth\r\n                required\r\n                name=\"lotNumber\"\r\n                label=\"Lot Number\"\r\n                value={formData.lotNumber}\r\n                onChange={handleChange}\r\n              />\r\n            </Grid>\r\n\r\n            <Grid item xs={12} sm={6}>\r\n              <TextField\r\n                fullWidth\r\n                required\r\n                name=\"quantities\"\r\n                label=\"Quantities\"\r\n                type=\"number\"\r\n                value={formData.quantities}\r\n                onChange={handleChange}\r\n              />\r\n            </Grid>\r\n\r\n            {/* New Fields */}\r\n            <Grid item xs={12} sm={6}>\r\n              <FormControl fullWidth>\r\n                <InputLabel>Qualified Manufacturer</InputLabel>\r\n                <Select\r\n                  name=\"qualifiedManufacturer\"\r\n                  value={formData.qualifiedManufacturer}\r\n                  onChange={handleChange}\r\n                  label=\"Qualified Manufacturer\"\r\n                  required\r\n                  endAdornment={\r\n                    formData.qualifiedManufacturer && (\r\n                      <IconButton \r\n                        size=\"small\" \r\n                        sx={{ mr: 4 }}\r\n                        onClick={() => setFormData(prev => ({ ...prev, qualifiedManufacturer: '' }))}\r\n                      >\r\n                        <ClearIcon fontSize=\"small\" />\r\n                      </IconButton>\r\n                    )\r\n                  }\r\n                >\r\n                  {qualifiedManufacturer.map(option => (\r\n                    <MenuItem key={option} value={option}>{option}</MenuItem>\r\n                  ))}\r\n                </Select>\r\n              </FormControl>\r\n            </Grid>\r\n\r\n            <Grid item xs={12} sm={6}>\r\n              <FormControl fullWidth>\r\n                <InputLabel>Vendor</InputLabel>\r\n                <Select\r\n                  name=\"vendor\"\r\n                  value={formData.vendor}\r\n                  onChange={handleChange}\r\n                  label=\"Vendor\"\r\n                  required\r\n                  endAdornment={\r\n                    formData.vendor && (\r\n                      <IconButton \r\n                        size=\"small\" \r\n                        sx={{ mr: 4 }}\r\n                        onClick={() => setFormData(prev => ({ ...prev, vendor: '' }))}\r\n                      >\r\n                        <ClearIcon fontSize=\"small\" />\r\n                      </IconButton>\r\n                    )\r\n                  }\r\n                >\r\n                  {vendorOptions.map(option => (\r\n                    <MenuItem key={option} value={option}>{option}</MenuItem>\r\n                  ))}\r\n                </Select>\r\n              </FormControl>\r\n            </Grid>\r\n\r\n            {/* Add transportation field after vendor field */}\r\n            <Grid item xs={12} sm={6}>\r\n              <TextField\r\n                fullWidth\r\n                label=\"Transportation\"\r\n                name=\"transportation\"\r\n                value={formData.transportation}\r\n                onChange={handleChange}\r\n                required\r\n                placeholder=\"Enter transportation details\"\r\n              />\r\n            </Grid>\r\n\r\n            <Grid item xs={12} sm={6}>\r\n              <TextField\r\n                fullWidth\r\n                label=\"Landing Bill Number\"\r\n                name=\"landingBillNumber\"\r\n                value={formData.landingBillNumber}\r\n                onChange={handleChange}\r\n                required\r\n              />\r\n            </Grid>\r\n\r\n            {/* Quantity Fields Row */}\r\n            <Grid item xs={12} sm={6}>\r\n              <TextField\r\n                fullWidth\r\n                label=\"Remaining Quantity\"\r\n                value={formData.remainingQuantity}\r\n                InputLabelProps={{ shrink: true }}\r\n                InputProps={{\r\n                  readOnly: true,\r\n                }}\r\n                disabled\r\n              />\r\n            </Grid>\r\n\r\n            <Grid item xs={12} sm={6}>\r\n              <FormControl fullWidth>\r\n                <InputLabel>Unit</InputLabel>\r\n                <Select\r\n                  name=\"unit\"\r\n                  value={formData.unit}\r\n                  label=\"Unit\"\r\n                  onChange={handleChange}\r\n                  required\r\n                  endAdornment={\r\n                    formData.unit && (\r\n                      <IconButton \r\n                        size=\"small\" \r\n                        sx={{ mr: 4 }}\r\n                        onClick={() => setFormData(prev => ({ ...prev, unit: '' }))}\r\n                      >\r\n                        <ClearIcon fontSize=\"small\" />\r\n                      </IconButton>\r\n                    )\r\n                  }\r\n                >\r\n                  {unitOptions.map(option => (\r\n                    <MenuItem key={option} value={option}>{option}</MenuItem>\r\n                  ))}\r\n                </Select>\r\n              </FormControl>\r\n            </Grid>\r\n\r\n            <Grid item xs={12} sm={6}>\r\n              <TextField\r\n                fullWidth\r\n                required\r\n                type=\"date\"\r\n                name=\"expiryDate\"\r\n                label=\"Expiry Date\"\r\n                InputLabelProps={{ shrink: true }}\r\n                value={formData.expiryDate || ''}\r\n                onChange={(e) => setFormData(prev => ({\r\n                  ...prev,\r\n                  expiryDate: e.target.value\r\n                }))}\r\n                sx={{ width: '100%' }}  // Ensure full width\r\n              />\r\n            </Grid>\r\n\r\n            <Grid item xs={12} sm={6}>\r\n              <TextField\r\n                fullWidth\r\n                label=\"Total Quantity Accepted\"\r\n                name=\"totalQuantityAccepted\"\r\n                type=\"number\"\r\n                value={formData.totalQuantityAccepted}\r\n                onChange={handleChange}\r\n                required\r\n              />\r\n            </Grid>\r\n\r\n            <Grid item xs={12} sm={6}>\r\n              <FormControlLabel\r\n                control={\r\n                  <Checkbox\r\n                    checked={formData.damageToPackaging}\r\n                    onChange={handleChange}\r\n                    name=\"damageToPackaging\"\r\n                  />\r\n                }\r\n                label=\"Damage to Packaging\"\r\n              />\r\n            </Grid>\r\n\r\n            <Grid item xs={12} sm={6}>\r\n              <FormControlLabel\r\n                control={\r\n                  <Checkbox\r\n                    checked={formData.damageToProduct}\r\n                    onChange={handleChange}\r\n                    name=\"damageToProduct\"\r\n                  />\r\n                }\r\n                label=\"Damage to Product\"\r\n              />\r\n            </Grid>\r\n\r\n            {(formData.damageToPackaging || formData.damageToProduct) && (\r\n              <Grid item xs={12}>\r\n                <TextField\r\n                  fullWidth\r\n                  multiline\r\n                  rows={4}\r\n                  label=\"Damage Notes\"\r\n                  name=\"damageNotes\"\r\n                  value={formData.damageNotes}\r\n                  onChange={handleChange}\r\n                  required\r\n                />\r\n              </Grid>\r\n            )}\r\n\r\n            {/* Receiver Details */}\r\n            {shouldShowSection('receiver') && (\r\n              <>\r\n                <Grid item xs={12}>\r\n                  <Typography variant=\"h6\" sx={{ mb: 2, mt: 2 }}>Receiver Details</Typography>\r\n                </Grid>\r\n\r\n                <Grid item xs={12} sm={4}>\r\n                  <TextField\r\n                    fullWidth\r\n                    name=\"receiverName\"\r\n                    label=\"Receiver Name\"\r\n                    value={formData.receiverName}\r\n                    onChange={handleChange}\r\n                    disabled={!canModifyField('receiverName')}\r\n                  />\r\n                </Grid>\r\n\r\n                <Grid item xs={12} sm={4}>\r\n                <Box sx={{ width: '100%', mt: -3 }}>\r\n                    <Typography variant=\"subtitle2\" sx={{ marginBottom: '3px !important' }}>Receiver Signature</Typography>\r\n                    {formData.receiverSign ? (\r\n                      <Box sx={{ border: '1px solid #ccc', p: 1, mb: 1 }}>\r\n                        <img \r\n                          src={formData.receiverSign} \r\n                          alt=\"Receiver Signature\" \r\n                          style={{ maxWidth: '100%', height: 'auto' }}\r\n                        />\r\n                      </Box>\r\n                    ) : null}\r\n                    {canModifyField('receiverSign') && (\r\n                      <Button\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                        onClick={() => handleSignatureClick('receiverSign')}\r\n                      >\r\n                        {formData.receiverSign ? 'Change Signature' : 'Add Signature'}\r\n                      </Button>\r\n                    )}\r\n                  </Box>\r\n                </Grid>\r\n\r\n                <Grid item xs={12} sm={4}>\r\n                <TextField\r\n                    fullWidth\r\n                    type=\"date\"\r\n                    name=\"receiverDate\"\r\n                    label=\"Receiver Date\"\r\n                    InputLabelProps={{ shrink: true }}\r\n                    value={formData.receiverDate}\r\n                    InputProps={{ readOnly: true }}\r\n                />\r\n                </Grid>\r\n              </>\r\n            )}\r\n\r\n            {/* Inspector Details */}\r\n            {shouldShowSection('inspector') && (\r\n              <>\r\n                <Grid item xs={12}>\r\n                  <Typography variant=\"h6\" sx={{ mb: 2, mt: 2 }}>Inspector Details</Typography>\r\n                </Grid>\r\n\r\n                <Grid item xs={12} sm={4}>\r\n                  <TextField\r\n                    fullWidth\r\n                    name=\"inspectorName\"\r\n                    label=\"Inspector Name\"\r\n                    value={formData.inspectorName}\r\n                    onChange={handleChange}\r\n                    disabled={!canModifyField('inspectorName')}\r\n                  />\r\n                </Grid>\r\n\r\n                <Grid item xs={12} sm={4}>\r\n                <Box sx={{ width: '100%', mt: -3 }}>\r\n                    <Typography variant=\"subtitle2\" sx={{ marginBottom: '3px !important' }}>Inspector Signature</Typography>\r\n                    {formData.inspectorSign ? (\r\n                      <Box sx={{ border: '1px solid #ccc', p: 1, mb: 1 }}>\r\n                        <img \r\n                          src={formData.inspectorSign} \r\n                          alt=\"Inspector Signature\" \r\n                          style={{ maxWidth: '100%', height: 'auto' }}\r\n                        />\r\n                      </Box>\r\n                    ) : null}\r\n                    {canModifyField('inspectorSign') && (\r\n                      <Button\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                        onClick={() => handleSignatureClick('inspectorSign')}\r\n                      >\r\n                        {formData.inspectorSign ? 'Change Signature' : 'Add Signature'}\r\n                      </Button>\r\n                    )}\r\n                  </Box>\r\n                </Grid>\r\n\r\n                <Grid item xs={12} sm={4}>\r\n                  <TextField\r\n                    fullWidth\r\n                    type=\"date\"\r\n                    name=\"inspectorDate\"\r\n                    label=\"Inspector Date\"\r\n                    InputLabelProps={{ shrink: true }}\r\n                    value={formData.inspectorDate}\r\n                    InputProps={{ readOnly: true }}\r\n                  />\r\n                </Grid>\r\n              </>\r\n            )}\r\n\r\n            {/* Approver Details */}\r\n            {shouldShowSection('approver') && (\r\n              <>\r\n                <Grid item xs={12}>\r\n                  <Typography variant=\"h6\" sx={{ mb: 2, mt: 2 }}>Approver Details</Typography>\r\n                </Grid>\r\n\r\n                <Grid item xs={12} sm={4}>\r\n                  <TextField\r\n                    fullWidth\r\n                    name=\"approverName\"\r\n                    label=\"Approver Name\"\r\n                    value={formData.approverName}\r\n                    onChange={handleChange}\r\n                    disabled={!canModifyField('approverName')}\r\n                  />\r\n                </Grid>\r\n\r\n                <Grid item xs={12} sm={4}>\r\n                <Box sx={{ width: '100%', mt: -3 }}>    \r\n                    <Typography variant=\"subtitle2\" sx={{ marginBottom: '3px !important' }}>Approver Signature</Typography>\r\n                    {formData.approverSign ? (\r\n                      <Box sx={{ border: '1px solid #ccc', p: 1, mb: 1 }}>\r\n                        <img \r\n                          src={formData.approverSign} \r\n                          alt=\"Approver Signature\" \r\n                          style={{ maxWidth: '100%', height: 'auto' }}\r\n                        />\r\n                      </Box>\r\n                    ) : null}\r\n                    {canModifyField('approverSign') && (\r\n                      <Button\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                        onClick={() => handleSignatureClick('approverSign')}\r\n                      >\r\n                        {formData.approverSign ? 'Change Signature' : 'Add Signature'}\r\n                      </Button>\r\n                    )}\r\n                  </Box>\r\n                </Grid>\r\n\r\n                <Grid item xs={12} sm={4}>\r\n                  <TextField\r\n                    fullWidth\r\n                    type=\"date\"\r\n                    name=\"approverDate\"\r\n                    label=\"Approver Date\"\r\n                    InputLabelProps={{ shrink: true }}\r\n                    value={formData.approverDate}\r\n                    InputProps={{ readOnly: true }}\r\n                  />\r\n                </Grid>\r\n              </>\r\n            )}\r\n\r\n            {/* Attachment */}\r\n            <Grid item xs={12}>\r\n              <Typography variant=\"h6\" sx={{ mb: 2, mt: 2 }}>\r\n                Attachment (Optional - Max 1MB)\r\n              </Typography>\r\n              <Input\r\n                type=\"file\"\r\n                accept=\"application/pdf\"\r\n                onChange={handleFileChange}\r\n                sx={{ mb: 2 }}\r\n              />\r\n              {formData.attachmentUrl && (\r\n                <Typography variant=\"body2\" color=\"primary\" sx={{ mt: 1 }}>\r\n                  Current attachment: {formData.attachmentName || 'PDF Document'}\r\n                </Typography>\r\n              )}\r\n            </Grid>\r\n\r\n            {/* Signature Dialog */}\r\n            <SignatureDialog\r\n              open={signatureDialogOpen}\r\n              onClose={() => setSignatureDialogOpen(false)}\r\n              onSave={handleSignatureSave}\r\n              title={`Add ${currentSignatureField?.replace('Sign', '')} Signature`}\r\n            />\r\n\r\n            {/* Submit */}\r\n            <Grid item xs={12}>\r\n              <Box sx={{ display: 'flex', gap: 2, mt: 2 }}>\r\n                <Button\r\n                  type=\"submit\"\r\n                  variant=\"contained\"\r\n                  color=\"primary\"\r\n                  size=\"large\"\r\n                  fullWidth\r\n                >\r\n                  Submit Form\r\n                </Button>\r\n                \r\n              </Box>\r\n            </Grid>\r\n          </Grid>\r\n        </Box>\r\n      </Paper>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default ShippingForm;"],"names":["SignatureDialog","_ref","open","onClose","onSave","title","sigPadRef","useRef","_jsxs","Dialog","maxWidth","fullWidth","children","_jsx","DialogTitle","DialogContent","Box","sx","border","borderRadius","mt","backgroundColor","SignaturePad","ref","canvasProps","width","height","className","DialogActions","Button","onClick","handleClear","current","clear","color","handleSave","signatureData","toDataURL","variant","ShippingForm","navigate","useNavigate","location","useLocation","isEditMode","setIsEditMode","useState","recordId","setRecordId","formData","setFormData","shipmentCode","shipmentDate","itemNo","itemName","lotNumber","quantities","receiverName","receiverSign","receiverDate","inspectorName","inspectorSign","inspectorDate","approverName","approverSign","approverDate","attachmentUrl","attachmentName","qualifiedManufacturer","landingBillNumber","remainingQuantity","unit","expiryDate","damageToPackaging","damageToProduct","totalQuantityAccepted","damageNotes","vendor","transportation","signatureDialogOpen","setSignatureDialogOpen","currentSignatureField","setCurrentSignatureField","recordFromDatabase","setRecordFromDatabase","generateShipmentCode","useCallback","cleanItemNo","replace","cleanLotNo","dateStr","slice","toUpperCase","useEffect","async","dbInstance","localStorage","getItem","testDb","db","collectionName","editId","URLSearchParams","search","get","console","log","docRef","doc","docSnap","getDoc","exists","data","id","error","alert","loadExistingRecord","handleChange","e","name","value","type","checked","target","newValue","prev","updatedData","Number","includes","handleSignatureClick","fieldName","canModifyField","startsWith","status","shouldShowSection","section","Container","Paper","elevation","p","display","flexDirection","xs","sm","justifyContent","alignItems","gap","mb","handleBack","window","href","Typography","textAlign","fontSize","component","onSubmit","preventDefault","isTestUser","dataToSubmit","lastUpdated","Date","toISOString","isTestData","nextId","q","query","collection","orderBy","limit","querySnapshot","getDocs","empty","lastDoc","docs","parseInt","numericId","toString","uniqueId","now","createdAt","requiredFields","missingFields","filter","field","length","join","updateDoc","addDoc","errorMessage","message","Grid","container","spacing","item","TextField","disabled","label","helperText","required","InputLabelProps","shrink","onChange","FormControl","InputLabel","Select","endAdornment","IconButton","size","mr","ClearIcon","map","option","MenuItem","placeholder","InputProps","readOnly","FormControlLabel","control","Checkbox","multiline","rows","_Fragment","marginBottom","src","alt","style","Input","accept","file","files","reader","FileReader","onload","result","readAsDataURL","signature","currentDate","split","dateField"],"sourceRoot":""}