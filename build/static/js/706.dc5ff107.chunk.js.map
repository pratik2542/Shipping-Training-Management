{"version":3,"file":"static/js/706.dc5ff107.chunk.js","mappings":"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","sources":["config/api.js","components/Login.js"],"sourcesContent":["const API_URL = process.env.NODE_ENV === 'production' \r\n  ? 'https://shipping-management.vercel.app/api'  // Production API URL\r\n  : 'http://localhost:5000/api';  // Development API URL\r\n\r\nexport const getApiUrl = (endpoint) => {\r\n  const url = `${API_URL}${endpoint}`;\r\n  console.log('API Request to:', url); // Debug log\r\n  return url;\r\n};\r\n","import React, { useState } from 'react';\r\nimport { Paper, Avatar, Box, TextField, Button, Typography, Container } from '@mui/material';\r\nimport { signInWithEmailAndPassword } from 'firebase/auth';\r\nimport { auth } from '../firebase/config';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport LockOutlinedIcon from '@mui/icons-material/LockOutlined';\r\nimport { createUserWithEmailAndPassword } from 'firebase/auth';\r\nimport { testAuth } from '../firebase/testConfig';\r\nimport { collection, addDoc, query, where, getDocs } from 'firebase/firestore';\r\nimport { db } from '../firebase/config';\r\nimport HelpIcon from '@mui/icons-material/Help';\r\nimport { Tooltip, IconButton } from '@mui/material';\r\nimport CircularProgress from '@mui/material/CircularProgress';\r\nimport { getApiUrl } from '../config/api';\r\n\r\nconst ADMIN_EMAILS = ['pratikmak2542@gmail.com']; // Add your admin emails here\r\n\r\nconst Login = () => {\r\n  // Add this console log to verify which API URL is being used\r\n  console.log('API URL:', process.env.REACT_APP_API_URL);\r\n\r\n  const [email, setEmail] = useState('');\r\n  const [password, setPassword] = useState('');\r\n  const [name, setName] = useState('');\r\n  const [error, setError] = useState('');\r\n  const [showTestSignup, setShowTestSignup] = useState(false);\r\n  const [showRegister, setShowRegister] = useState(false);\r\n  const [isTestUser, setIsTestUser] = useState(false);\r\n  const [isSubmitting, setIsSubmitting] = useState(false);\r\n  const navigate = useNavigate();\r\n\r\n  const sendAdminNotification = async (userData) => {\r\n    try {\r\n      console.log('Sending notification to:', getApiUrl('/notify-admin'));\r\n      const response = await fetch(getApiUrl('/notify-admin'), {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(userData)\r\n      });\r\n\r\n      const data = await response.json();\r\n      console.log('Server response:', data);\r\n\r\n      if (!response.ok) {\r\n        throw new Error(data.error || 'Failed to send notification');\r\n      }\r\n\r\n      return data;\r\n    } catch (error) {\r\n      console.error('Detailed error:', error);\r\n      throw error; // Re-throw to handle in handleRegister\r\n    }\r\n  };\r\n\r\n  const handleRegister = async (e) => {\r\n    e.preventDefault();\r\n    if (isSubmitting) return; // Prevent multiple submissions\r\n\r\n    setIsSubmitting(true); // Start loading\r\n    try {\r\n      // Check if user already has a pending request\r\n      const existingRequestQuery = query(\r\n        collection(db, 'userRequests'),\r\n        where('email', '==', email),\r\n        where('status', '==', 'pending')\r\n      );\r\n      \r\n      const existingRequestDocs = await getDocs(existingRequestQuery);\r\n      if (!existingRequestDocs.empty) {\r\n        alert('You already have a pending registration request.');\r\n        setIsSubmitting(false);\r\n        return;\r\n      }\r\n\r\n      const userRequest = {\r\n        name,\r\n        email,\r\n        status: 'pending',\r\n        createdAt: new Date().toISOString(),\r\n        isTestUser: false\r\n      };\r\n\r\n      // Try to send notification first\r\n      await sendAdminNotification(userRequest);\r\n      \r\n      // Only add to Firebase if notification succeeds\r\n      await addDoc(collection(db, 'userRequests'), userRequest);\r\n\r\n      alert('Registration request submitted successfully.');\r\n      navigate('/pending-status', { state: { email } });\r\n      \r\n    } catch (error) {\r\n      console.error('Registration failed:', error);\r\n      setError(`Registration failed: ${error.message}`);\r\n      alert('Failed to submit registration. Please try again.');\r\n    } finally {\r\n      setIsSubmitting(false); // End loading\r\n    }\r\n  };\r\n\r\n  const handleLogin = async (e) => {\r\n    e.preventDefault();\r\n    try {\r\n      // Sign in user\r\n      await signInWithEmailAndPassword(auth, email, password);\r\n      \r\n      // If using temporary password, redirect to reset\r\n      if (password === 'tempPassword123') {\r\n        navigate('/reset-password', { state: { fromTempPassword: true } });\r\n        return;\r\n      }\r\n\r\n      // Check if user is admin\r\n      if (ADMIN_EMAILS.includes(email)) {\r\n        // Check for pending requests\r\n        const pendingQuery = query(\r\n          collection(db, 'userRequests'),\r\n          where('status', '==', 'pending')\r\n        );\r\n        const pendingSnapshot = await getDocs(pendingQuery);\r\n        \r\n        localStorage.setItem('isAdmin', 'true');\r\n        \r\n        // Only redirect to verify page if there are pending requests\r\n        if (pendingSnapshot.size > 0) {\r\n          navigate('/admin/verify');\r\n        } else {\r\n          navigate('/dashboard');\r\n        }\r\n        return;\r\n      }\r\n\r\n      // For test users, use test auth and mark them as test users\r\n      if (isTestUser) {\r\n        await signInWithEmailAndPassword(testAuth, email, password);\r\n        localStorage.setItem('isTestUser', 'true');\r\n      } else {\r\n        // Sign in and get user credentials\r\n        await signInWithEmailAndPassword(auth, email, password);\r\n        \r\n        // Check if user is approved\r\n        const userQuery = query(\r\n          collection(db, 'userRequests'),\r\n          where('email', '==', email),\r\n          where('status', '==', 'pending')\r\n        );\r\n        const userSnapshot = await getDocs(userQuery);\r\n        \r\n        if (!userSnapshot.empty) {\r\n          await auth.signOut(); // Sign out if not approved\r\n          setError('Your account is pending approval. Please wait for admin verification.');\r\n          return;\r\n        }\r\n\r\n        localStorage.removeItem('isAdmin');\r\n        localStorage.removeItem('isTestUser');\r\n        navigate('/dashboard');\r\n      }\r\n    } catch (error) {\r\n      setError(error.message);\r\n    }\r\n  };\r\n\r\n  const handleTestSignup = async (e) => {\r\n    e.preventDefault();\r\n    try {\r\n      // Always create test users with testAuth and mark them as test users\r\n      await createUserWithEmailAndPassword(testAuth, email, password);\r\n      localStorage.setItem('isTestUser', 'true');\r\n      navigate('/dashboard');\r\n    } catch (error) {\r\n      setError(error.message);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Container component=\"main\" maxWidth=\"xs\">\r\n      <Paper\r\n        elevation={3}\r\n        sx={{\r\n          marginTop: 8,\r\n          padding: 4,\r\n          display: 'flex',\r\n          flexDirection: 'column',\r\n          alignItems: 'center',\r\n        }}\r\n      >\r\n        <Avatar sx={{ m: 1, bgcolor: 'primary.main' }}>\r\n          <LockOutlinedIcon />\r\n        </Avatar>\r\n        <Typography component=\"h1\" variant=\"h5\" sx={{ mb: 3 }}>\r\n          {showRegister ? 'Register' : showTestSignup ? 'Create Test Account' : 'Sign in'}\r\n        </Typography>\r\n        {error && (\r\n          <Typography color=\"error\" sx={{ mb: 2 }}>\r\n            {error}\r\n          </Typography>\r\n        )}\r\n        <Box component=\"form\" onSubmit={showRegister ? handleRegister : showTestSignup ? handleTestSignup : handleLogin} sx={{ mt: 1 }}>\r\n          {showRegister ? (\r\n            <>\r\n              <TextField\r\n                margin=\"normal\"\r\n                required\r\n                fullWidth\r\n                label=\"Full Name\"\r\n                value={name}\r\n                onChange={(e) => setName(e.target.value)}\r\n                sx={{ mb: 2 }}\r\n              />\r\n              <Box sx={{ position: 'relative' }}>\r\n                <TextField\r\n                  margin=\"normal\"\r\n                  required\r\n                  fullWidth\r\n                  label=\"Email Address\"\r\n                  value={email}\r\n                  onChange={(e) => setEmail(e.target.value)}\r\n                  sx={{ mb: 3 }}\r\n                />\r\n                <Tooltip \r\n                  title=\"After your registration is approved, you'll receive an email with a temporary password to log in.\"\r\n                  arrow\r\n                  placement=\"top\"\r\n                >\r\n                  <IconButton \r\n                    sx={{ \r\n                      position: 'absolute', \r\n                      right: -40, \r\n                      top: '50%', \r\n                      transform: 'translateY(-50%)'\r\n                    }}\r\n                  >\r\n                    <HelpIcon color=\"primary\" fontSize=\"small\" />\r\n                  </IconButton>\r\n                </Tooltip>\r\n              </Box>\r\n              <Button\r\n                type=\"submit\"\r\n                fullWidth\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                sx={{ mt: 3, mb: 2 }}\r\n                disabled={isSubmitting}\r\n              >\r\n                {isSubmitting ? (\r\n                  <Box sx={{ display: 'flex', alignItems: 'center' }}>\r\n                    <CircularProgress size={24} sx={{ mr: 1 }} />\r\n                    Registering...\r\n                  </Box>\r\n                ) : (\r\n                  'Register'\r\n                )}\r\n              </Button>\r\n              <Button\r\n                fullWidth\r\n                variant=\"outlined\"\r\n                onClick={() => {\r\n                  setShowRegister(false);\r\n                  setName('');\r\n                }}\r\n                sx={{ mt: 1 }}\r\n              >\r\n                Back to Login\r\n              </Button>\r\n            </>\r\n          ) : (\r\n            <>\r\n              <TextField\r\n                margin=\"normal\"\r\n                required\r\n                fullWidth\r\n                label=\"Email Address\"\r\n                value={email}\r\n                onChange={(e) => setEmail(e.target.value)}\r\n                sx={{ mb: 2 }}\r\n              />\r\n              <TextField\r\n                margin=\"normal\"\r\n                required\r\n                fullWidth\r\n                label=\"Password\"\r\n                type=\"password\"\r\n                value={password}\r\n                onChange={(e) => setPassword(e.target.value)}\r\n                sx={{ mb: 3 }}\r\n              />\r\n              {!showTestSignup && !showRegister ? (\r\n                <>\r\n                  <Button\r\n                    type=\"submit\"\r\n                    fullWidth\r\n                    variant=\"contained\"\r\n                    size=\"large\"\r\n                    sx={{ \r\n                      py: 1.5,\r\n                      fontSize: '1.1rem',\r\n                      '&:hover': {\r\n                        transform: 'translateY(-2px)',\r\n                        transition: 'transform 0.2s',\r\n                      }\r\n                    }}\r\n                  >\r\n                    Sign In\r\n                  </Button>\r\n                  <Box sx={{ display: 'flex', justifyContent: 'space-between', mt: 1, mb: 2 }}>\r\n                    <Button\r\n                      color=\"primary\"\r\n                      onClick={() => navigate('/check-status')}\r\n                      sx={{ textTransform: 'none' }}\r\n                    >\r\n                      Check Registration Status\r\n                    </Button>\r\n                    <Button\r\n                      color=\"primary\"\r\n                      onClick={() => navigate('/forgot-password')}\r\n                      sx={{ textTransform: 'none' }}\r\n                    >\r\n                      Forgot password?\r\n                    </Button>\r\n                  </Box>\r\n                  <Button\r\n                    fullWidth\r\n                    variant=\"outlined\"\r\n                    onClick={() => setShowRegister(true)}\r\n                    sx={{ mt: 1 }}\r\n                  >\r\n                    Create Account\r\n                  </Button>\r\n                  <Button\r\n                    fullWidth\r\n                    variant=\"outlined\"\r\n                    onClick={() => {\r\n                      setShowTestSignup(true);\r\n                      setIsTestUser(true);\r\n                    }}\r\n                    sx={{ mt: 1 }}\r\n                  >\r\n                    Create Test Account\r\n                  </Button>\r\n                </>\r\n              ) : (\r\n                <>\r\n                  <Button\r\n                    type=\"submit\"\r\n                    fullWidth\r\n                    variant=\"contained\"\r\n                    color=\"warning\"\r\n                    sx={{ mt: 3, mb: 2 }}\r\n                  >\r\n                    Create Test Account\r\n                  </Button>\r\n                  <Button\r\n                    fullWidth\r\n                    variant=\"outlined\"\r\n                    onClick={() => {\r\n                      setShowTestSignup(false);\r\n                      setIsTestUser(false);\r\n                    }}\r\n                    sx={{ mt: 1 }}\r\n                  >\r\n                    Back to Login\r\n                  </Button>\r\n                </>\r\n              )}\r\n            </>\r\n          )}\r\n        </Box>\r\n      </Paper>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default Login;"],"names":["getApiUrl","endpoint","url","console","log","ADMIN_EMAILS","Login","process","REACT_APP_API_URL","email","setEmail","useState","password","setPassword","name","setName","error","setError","showTestSignup","setShowTestSignup","showRegister","setShowRegister","isTestUser","setIsTestUser","isSubmitting","setIsSubmitting","navigate","useNavigate","_jsx","Container","component","maxWidth","children","_jsxs","Paper","elevation","sx","marginTop","padding","display","flexDirection","alignItems","Avatar","m","bgcolor","LockOutlinedIcon","Typography","variant","mb","color","Box","onSubmit","async","e","preventDefault","existingRequestQuery","query","collection","db","where","getDocs","empty","alert","userRequest","status","createdAt","Date","toISOString","response","fetch","method","headers","body","JSON","stringify","userData","data","json","ok","Error","sendAdminNotification","addDoc","state","message","createUserWithEmailAndPassword","testAuth","localStorage","setItem","signInWithEmailAndPassword","auth","fromTempPassword","includes","pendingQuery","pendingSnapshot","size","userQuery","signOut","removeItem","mt","_Fragment","TextField","margin","required","fullWidth","label","value","onChange","target","position","Tooltip","title","arrow","placement","IconButton","right","top","transform","HelpIcon","fontSize","Button","type","disabled","CircularProgress","mr","onClick","py","transition","justifyContent","textTransform"],"sourceRoot":""}