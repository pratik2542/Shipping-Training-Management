{"version":3,"file":"static/js/181.5aac3a9a.chunk.js","mappings":"oOAMA,MAgHA,EAhHsBA,KACpB,MAAOC,EAAUC,IAAeC,EAAAA,EAAAA,UAAS,KAClCC,EAAiBC,IAAsBF,EAAAA,EAAAA,UAAS,KAChDG,EAAOC,IAAYJ,EAAAA,EAAAA,UAAS,KAC5BK,EAAOC,IAAYN,EAAAA,EAAAA,UAAS,KAC5BO,EAASC,IAAcR,EAAAA,EAAAA,UAAS,KAChCS,EAAeC,IAAoBV,EAAAA,EAAAA,WAAS,GAC7CW,GAAWC,EAAAA,EAAAA,OAEjBC,EAAAA,EAAAA,YAAU,KAER,MACMC,EADe,IAAIC,gBAAgBC,OAAOC,SAASC,QAC/BC,IAAI,WAE9B,GAAIL,EACFJ,GAAiB,GACjBF,EAAWM,IAEXM,EAAAA,EAAAA,IAAwBC,EAAAA,EAAMP,GAC3BQ,MAAMjB,IACLC,EAASD,GACTD,EAAS,GAAG,IAEbmB,OAAOpB,IACNqB,QAAQrB,MAAM,8BAA+BA,GAC7CC,EAAS,gCAAgC,QAExC,CAEL,MAAMqB,EAAOJ,EAAAA,EAAKK,YACdD,EACFnB,EAASmB,EAAKpB,OAEdD,EAAS,qCAEb,IACC,IAiCH,OACEuB,EAAAA,EAAAA,KAACC,EAAAA,EAAS,CAACC,SAAS,KAAIC,UACtBC,EAAAA,EAAAA,MAACC,EAAAA,EAAK,CAACC,UAAW,EAAGC,GAAI,CAAEC,EAAG,EAAGC,GAAI,GAAIN,SAAA,EACvCH,EAAAA,EAAAA,KAACU,EAAAA,EAAU,CAACC,QAAQ,KAAKJ,GAAI,CAAEK,GAAI,GAAIT,SAAC,wBACvCzB,IACC0B,EAAAA,EAAAA,MAACM,EAAAA,EAAU,CAACH,GAAI,CAAEK,GAAI,GAAIT,SAAA,CAAC,2BACAzB,MAG7B0B,EAAAA,EAAAA,MAAA,QAAMS,SAxCSC,UAEnB,GADAC,EAAEC,iBACE7C,IAAaG,EAKjB,IACE,GAAIQ,EAAe,CAEjB,IAAKF,EACH,MAAM,IAAIqC,MAAM,4BAEZC,EAAAA,EAAAA,IAAqBxB,EAAAA,EAAMd,EAAST,EAC5C,KAAO,CAEL,MAAM2B,EAAOJ,EAAAA,EAAKK,YAClB,IAAKD,EACH,MAAM,IAAImB,MAAM,4CAEZE,EAAAA,EAAAA,IAAerB,EAAM3B,EAC7B,CAEAiD,MAAM,uCACNpC,EAAS,IACX,CAAE,MAAOR,GACPqB,QAAQrB,MAAM,0BAA2BA,GACzCC,EAASD,EAAM6C,QACjB,MAzBE5C,EAAS,yBAyBX,EAYiC0B,SAAA,EAC3BH,EAAAA,EAAAA,KAACsB,EAAAA,EAAS,CACRC,WAAS,EACTC,KAAK,WACLC,MAAM,eACNC,MAAOvD,EACPwD,SAAWZ,GAAM3C,EAAY2C,EAAEa,OAAOF,OACtCnB,GAAI,CAAEK,GAAI,MAEZZ,EAAAA,EAAAA,KAACsB,EAAAA,EAAS,CACRC,WAAS,EACTC,KAAK,WACLC,MAAM,mBACNC,MAAOpD,EACPqD,SAAWZ,GAAMxC,EAAmBwC,EAAEa,OAAOF,OAC7CnB,GAAI,CAAEK,GAAI,KAEXpC,IACCwB,EAAAA,EAAAA,KAACU,EAAAA,EAAU,CAACmB,MAAM,QAAQtB,GAAI,CAAEK,GAAI,GAAIT,SAAE3B,KAE5CwB,EAAAA,EAAAA,KAAC8B,EAAAA,EAAM,CACLN,KAAK,SACLb,QAAQ,YACRY,WAAS,EACTQ,UAAWrD,IAAWE,GAAWE,EAAeqB,SACjD,0BAKK,C","sources":["components/PasswordReset.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { Container, Paper, TextField, Button, Typography } from '@mui/material';\r\nimport { confirmPasswordReset, verifyPasswordResetCode, updatePassword } from 'firebase/auth';\r\nimport { auth } from '../firebase/config';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nconst PasswordReset = () => {\r\n  const [password, setPassword] = useState('');\r\n  const [confirmPassword, setConfirmPassword] = useState('');\r\n  const [error, setError] = useState('');\r\n  const [email, setEmail] = useState('');\r\n  const [oobCode, setOobCode] = useState('');\r\n  const [isDirectReset, setIsDirectReset] = useState(false);\r\n  const navigate = useNavigate();\r\n\r\n  useEffect(() => {\r\n    // Check if this is a direct reset from email link\r\n    const searchParams = new URLSearchParams(window.location.search);\r\n    const code = searchParams.get('oobCode');\r\n    \r\n    if (code) {\r\n      setIsDirectReset(true);\r\n      setOobCode(code);\r\n      // Verify the code and get email\r\n      verifyPasswordResetCode(auth, code)\r\n        .then((email) => {\r\n          setEmail(email);\r\n          setError('');\r\n        })\r\n        .catch((error) => {\r\n          console.error('Error verifying reset code:', error);\r\n          setError('Invalid or expired reset link');\r\n        });\r\n    } else {\r\n      // This is a temp password reset after login\r\n      const user = auth.currentUser;\r\n      if (user) {\r\n        setEmail(user.email);\r\n      } else {\r\n        setError('No user found. Please login again.');\r\n      }\r\n    }\r\n  }, []);\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    if (password !== confirmPassword) {\r\n      setError('Passwords do not match');\r\n      return;\r\n    }\r\n\r\n    try {\r\n      if (isDirectReset) {\r\n        // Handle direct reset from email link\r\n        if (!oobCode) {\r\n          throw new Error('Invalid reset link');\r\n        }\r\n        await confirmPasswordReset(auth, oobCode, password);\r\n      } else {\r\n        // Handle password change after temp password login\r\n        const user = auth.currentUser;\r\n        if (!user) {\r\n          throw new Error('No user found. Please login again.');\r\n        }\r\n        await updatePassword(user, password);\r\n      }\r\n\r\n      alert('Password has been set successfully!');\r\n      navigate('/');\r\n    } catch (error) {\r\n      console.error('Error setting password:', error);\r\n      setError(error.message);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Container maxWidth=\"sm\">\r\n      <Paper elevation={3} sx={{ p: 4, mt: 8 }}>\r\n        <Typography variant=\"h5\" sx={{ mb: 3 }}>Reset Your Password</Typography>\r\n        {email && (\r\n          <Typography sx={{ mb: 2 }}>\r\n            Resetting password for: {email}\r\n          </Typography>\r\n        )}\r\n        <form onSubmit={handleSubmit}>\r\n          <TextField\r\n            fullWidth\r\n            type=\"password\"\r\n            label=\"New Password\"\r\n            value={password}\r\n            onChange={(e) => setPassword(e.target.value)}\r\n            sx={{ mb: 2 }}\r\n          />\r\n          <TextField\r\n            fullWidth\r\n            type=\"password\"\r\n            label=\"Confirm Password\"\r\n            value={confirmPassword}\r\n            onChange={(e) => setConfirmPassword(e.target.value)}\r\n            sx={{ mb: 3 }}\r\n          />\r\n          {error && (\r\n            <Typography color=\"error\" sx={{ mb: 2 }}>{error}</Typography>\r\n          )}\r\n          <Button\r\n            type=\"submit\"\r\n            variant=\"contained\"\r\n            fullWidth\r\n            disabled={!email || (!oobCode && isDirectReset)}\r\n          >\r\n            Reset Password\r\n          </Button>\r\n        </form>\r\n      </Paper>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default PasswordReset;\r\n"],"names":["PasswordReset","password","setPassword","useState","confirmPassword","setConfirmPassword","error","setError","email","setEmail","oobCode","setOobCode","isDirectReset","setIsDirectReset","navigate","useNavigate","useEffect","code","URLSearchParams","window","location","search","get","verifyPasswordResetCode","auth","then","catch","console","user","currentUser","_jsx","Container","maxWidth","children","_jsxs","Paper","elevation","sx","p","mt","Typography","variant","mb","onSubmit","async","e","preventDefault","Error","confirmPasswordReset","updatePassword","alert","message","TextField","fullWidth","type","label","value","onChange","target","color","Button","disabled"],"sourceRoot":""}