{"version":3,"file":"static/js/640.ddf8b3f1.chunk.js","mappings":"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","sources":["components/Manufacturing/forms/ManufacturingFormBase.js","components/Manufacturing/forms/VitaminDForm.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\r\nimport { Container, Paper, Typography, Grid, TextField, Button, Box } from '@mui/material';\r\nimport { collection, addDoc, getDocs, query, orderBy, limit } from 'firebase/firestore';\r\nimport { db } from '../../../firebase/config';\r\nimport { testDb } from '../../../firebase/testConfig';  // Fix import path\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nconst ManufacturingFormBase = ({ formTitle, components, collectionName }) => {\r\n  const navigate = useNavigate();\r\n  const [formData, setFormData] = useState({\r\n    dpNumber: '',\r\n    manufacturingDate: '',\r\n    components: components.reduce((acc, comp) => ({\r\n      ...acc,\r\n      [comp.name]: {\r\n        lotNumber: '',\r\n        itemNumber: '',\r\n        expDate: '',\r\n        releaseDate: '',\r\n        quantity: ''\r\n      }\r\n    }), {})\r\n  });\r\n\r\n  const generateDPNumber = useCallback(async () => {\r\n    const dbInstance = localStorage.getItem('isTestUser') === 'true' ? testDb : db;\r\n    const year = new Date().getFullYear().toString().slice(-2);\r\n    \r\n    try {\r\n      // Query all collections for the latest DP number\r\n      const collections = ['shipments', 'manufacturing_vitamin_d', 'manufacturing_menthol', \r\n                         'manufacturing_dha', 'manufacturing_tummy_relief', 'manufacturing_vitamin_dk'];\r\n      \r\n      let highestNumber = 0;\r\n\r\n      for (const col of collections) {\r\n        const q = query(\r\n          collection(dbInstance, col),\r\n          orderBy('dpNumber', 'desc'),\r\n          limit(1)\r\n        );\r\n        \r\n        const querySnapshot = await getDocs(q);\r\n        if (!querySnapshot.empty) {\r\n          const lastDoc = querySnapshot.docs[0].data();\r\n          const lastNumber = parseInt(lastDoc.dpNumber.slice(-3));\r\n          if (lastNumber > highestNumber) {\r\n            highestNumber = lastNumber;\r\n          }\r\n        }\r\n      }\r\n\r\n      const nextNumber = highestNumber + 1;\r\n      return `DP${year}${nextNumber.toString().padStart(3, '0')}`;\r\n    } catch (error) {\r\n      console.error('Error generating DP number:', error);\r\n      return `DP${year}001`;\r\n    }\r\n  }, []); // No dependencies needed as it doesn't rely on props or state\r\n\r\n  useEffect(() => {\r\n    const initForm = async () => {\r\n      const dpNumber = await generateDPNumber();\r\n      setFormData(prev => ({ ...prev, dpNumber }));\r\n    };\r\n    initForm();\r\n  }, [generateDPNumber]); // Add generateBatchNumber as dependency\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    try {\r\n      const dbInstance = localStorage.getItem('isTestUser') === 'true' ? testDb : db;\r\n      await addDoc(collection(dbInstance, collectionName), {\r\n        ...formData,\r\n        createdAt: new Date().toISOString(),\r\n        isTestData: localStorage.getItem('isTestUser') === 'true'\r\n      });\r\n      \r\n      alert('Manufacturing form submitted successfully!');\r\n      navigate('/manufacturing');\r\n    } catch (error) {\r\n      console.error('Error submitting form:', error);\r\n      alert('Error submitting form. Please try again.');\r\n    }\r\n  };\r\n\r\n  const handleChange = (componentName, field, value) => {\r\n    if (componentName) {\r\n      setFormData(prev => ({\r\n        ...prev,\r\n        components: {\r\n          ...prev.components,\r\n          [componentName]: {\r\n            ...prev.components[componentName],\r\n            [field]: value\r\n          }\r\n        }\r\n      }));\r\n    } else {\r\n      setFormData(prev => ({ ...prev, [field]: value }));\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Container maxWidth=\"lg\">\r\n      <Paper elevation={3} sx={{ p: 4, mt: 4, mb: 4 }}>\r\n        <Typography variant=\"h4\" sx={{ mb: 4, textAlign: 'center', color: 'primary.main' }}>\r\n          {formTitle}\r\n        </Typography>\r\n\r\n        <Box component=\"form\" onSubmit={handleSubmit}>\r\n          <Grid container spacing={3}>\r\n            {/* Basic Info */}\r\n            <Grid item xs={12} sm={6}>\r\n              <TextField\r\n                fullWidth\r\n                disabled\r\n                label=\"DP Number\"\r\n                value={formData.dpNumber}\r\n              />\r\n            </Grid>\r\n            <Grid item xs={12} sm={6}>\r\n              <TextField\r\n                fullWidth\r\n                required\r\n                type=\"date\"\r\n                name=\"manufacturingDate\"\r\n                label=\"Manufacturing Date\"\r\n                InputLabelProps={{ shrink: true }}\r\n                value={formData.manufacturingDate}\r\n                onChange={(e) => handleChange(null, 'manufacturingDate', e.target.value)}\r\n              />\r\n            </Grid>\r\n\r\n            {/* Component Fields */}\r\n            {components.map((component) => (\r\n              <Grid item xs={12} key={component.name}>\r\n                <Typography variant=\"h6\" sx={{ mt: 2, mb: 2 }}>\r\n                  {component.name}\r\n                </Typography>\r\n                <Grid container spacing={2}>\r\n                  <Grid item xs={12} sm={6} md={2}>\r\n                    <TextField\r\n                      fullWidth\r\n                      required\r\n                      label=\"Lot Number\"\r\n                      value={formData.components[component.name].lotNumber}\r\n                      onChange={(e) => handleChange(component.name, 'lotNumber', e.target.value)}\r\n                    />\r\n                  </Grid>\r\n                  <Grid item xs={12} sm={6} md={2}>\r\n                    <TextField\r\n                      fullWidth\r\n                      required\r\n                      label=\"Item Number\"\r\n                      value={formData.components[component.name].itemNumber}\r\n                      onChange={(e) => handleChange(component.name, 'itemNumber', e.target.value)}\r\n                    />\r\n                  </Grid>\r\n                  <Grid item xs={12} sm={6} md={2}>\r\n                    <TextField\r\n                      fullWidth\r\n                      required\r\n                      type=\"date\"\r\n                      label=\"Expiry Date\"\r\n                      InputLabelProps={{ shrink: true }}\r\n                      value={formData.components[component.name].expDate}\r\n                      onChange={(e) => handleChange(component.name, 'expDate', e.target.value)}\r\n                    />\r\n                  </Grid>\r\n                  <Grid item xs={12} sm={6} md={2}>\r\n                    <TextField\r\n                      fullWidth\r\n                      required\r\n                      type=\"date\"\r\n                      label=\"Release Date\"\r\n                      InputLabelProps={{ shrink: true }}\r\n                      value={formData.components[component.name].releaseDate}\r\n                      onChange={(e) => handleChange(component.name, 'releaseDate', e.target.value)}\r\n                    />\r\n                  </Grid>\r\n                  <Grid item xs={12} sm={6} md={2}>\r\n                    <TextField\r\n                      fullWidth\r\n                      required\r\n                      type=\"number\"\r\n                      label=\"Quantity\"\r\n                      value={formData.components[component.name].quantity}\r\n                      onChange={(e) => handleChange(component.name, 'quantity', e.target.value)}\r\n                    />\r\n                  </Grid>\r\n                </Grid>\r\n              </Grid>\r\n            ))}\r\n\r\n            <Grid item xs={12}>\r\n              <Box sx={{ display: 'flex', gap: 2, mt: 4 }}>\r\n                <Button\r\n                  variant=\"outlined\"\r\n                  onClick={() => navigate('/manufacturing')}\r\n                  fullWidth\r\n                >\r\n                  Back\r\n                </Button>\r\n                <Button\r\n                  type=\"submit\"\r\n                  variant=\"contained\"\r\n                  color=\"primary\"\r\n                  fullWidth\r\n                >\r\n                  Submit Form\r\n                </Button>\r\n              </Box>\r\n            </Grid>\r\n          </Grid>\r\n        </Box>\r\n      </Paper>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default ManufacturingFormBase;\r\n","import React from 'react';\r\nimport ManufacturingFormBase from './ManufacturingFormBase';\r\n\r\nconst components = [\r\n  { \r\n    name: 'Vitamin D3',\r\n    fields: ['lotNumber', 'itemNumber', 'expDate', 'releaseDate', 'quantity']\r\n  },\r\n  {\r\n    name: 'Medium Chain Triglycerides',\r\n    fields: ['lotNumber', 'itemNumber', 'expDate', 'releaseDate', 'quantity']\r\n  },\r\n  {\r\n    name: 'Tocopherol',\r\n    fields: ['lotNumber', 'itemNumber', 'expDate', 'releaseDate', 'quantity']\r\n  },\r\n  {\r\n    name: 'Sunflower Oil',\r\n    fields: ['lotNumber', 'itemNumber', 'expDate', 'releaseDate', 'quantity']\r\n  },\r\n  {\r\n    name: 'Mixed Tocopherols',\r\n    fields: ['lotNumber', 'itemNumber', 'expDate', 'releaseDate', 'quantity']\r\n  }\r\n];\r\n\r\nconst VitaminDForm = () => (\r\n  <ManufacturingFormBase\r\n    formTitle=\"Vitamin D Manufacturing Form\"\r\n    components={components}\r\n    collectionName=\"manufacturing_vitamin_d\"\r\n  />\r\n);\r\n\r\nexport default VitaminDForm;\r\n"],"names":["_ref","formTitle","components","collectionName","navigate","useNavigate","formData","setFormData","useState","dpNumber","manufacturingDate","reduce","acc","comp","name","lotNumber","itemNumber","expDate","releaseDate","quantity","generateDPNumber","useCallback","async","dbInstance","localStorage","getItem","testDb","db","year","Date","getFullYear","toString","slice","collections","highestNumber","col","q","query","collection","orderBy","limit","querySnapshot","getDocs","empty","lastDoc","docs","data","lastNumber","parseInt","padStart","error","console","useEffect","prev","initForm","handleChange","componentName","field","value","_jsx","Container","maxWidth","children","_jsxs","Paper","elevation","sx","p","mt","mb","Typography","variant","textAlign","color","Box","component","onSubmit","e","preventDefault","addDoc","createdAt","toISOString","isTestData","alert","Grid","container","spacing","item","xs","sm","TextField","fullWidth","disabled","label","required","type","InputLabelProps","shrink","onChange","target","map","md","display","gap","Button","onClick","fields","VitaminDForm","ManufacturingFormBase"],"sourceRoot":""}