{"version":3,"file":"static/js/476.b884fffc.chunk.js","mappings":"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","sources":["../node_modules/@emailjs/browser/es/models/EmailJSResponseStatus.js","../node_modules/@emailjs/browser/es/utils/createWebStorage/createWebStorage.js","../node_modules/@emailjs/browser/es/store/store.js","../node_modules/@emailjs/browser/es/utils/buildOptions/buildOptions.js","../node_modules/@emailjs/browser/es/api/sendPost.js","../node_modules/@emailjs/browser/es/utils/validateParams/validateParams.js","../node_modules/@emailjs/browser/es/utils/isHeadless/isHeadless.js","../node_modules/@emailjs/browser/es/errors/headlessError/headlessError.js","../node_modules/@emailjs/browser/es/utils/isBlockedValueInParams/isBlockedValueInParams.js","../node_modules/@emailjs/browser/es/utils/validateBlockListParams/validateBlockListParams.js","../node_modules/@emailjs/browser/es/errors/blockedEmailError/blockedEmailError.js","../node_modules/@emailjs/browser/es/utils/isLimitRateHit/isLimitRateHit.js","../node_modules/@emailjs/browser/es/utils/validateLimitRateParams/validateLimitRateParams.js","../node_modules/@emailjs/browser/es/errors/limitRateError/limitRateError.js","../node_modules/@emailjs/browser/es/index.js","../node_modules/@emailjs/browser/es/methods/send/send.js","../node_modules/@emailjs/browser/es/utils/validateTemplateParams/validateTemplateParams.js","utils/emailService.js","components/AdminVerification.js"],"sourcesContent":["export class EmailJSResponseStatus {\n    constructor(_status = 0, _text = 'Network Error') {\n        this.status = _status;\n        this.text = _text;\n    }\n}\n","export const createWebStorage = () => {\n    if (typeof localStorage === 'undefined')\n        return;\n    return {\n        get: (key) => Promise.resolve(localStorage.getItem(key)),\n        set: (key, value) => Promise.resolve(localStorage.setItem(key, value)),\n        remove: (key) => Promise.resolve(localStorage.removeItem(key)),\n    };\n};\n","import { createWebStorage } from '../utils/createWebStorage/createWebStorage';\nexport const store = {\n    origin: 'https://api.emailjs.com',\n    blockHeadless: false,\n    storageProvider: createWebStorage(),\n};\n","export const buildOptions = (options) => {\n    if (!options)\n        return {};\n    // support compatibility with SDK v3\n    if (typeof options === 'string') {\n        return {\n            publicKey: options,\n        };\n    }\n    // eslint-disable-next-line @typescript-eslint/no-base-to-string\n    if (options.toString() === '[object Object]') {\n        return options;\n    }\n    return {};\n};\n","import { EmailJSResponseStatus } from '../models/EmailJSResponseStatus';\nimport { store } from '../store/store';\nexport const sendPost = async (url, data, headers = {}) => {\n    const response = await fetch(store.origin + url, {\n        method: 'POST',\n        headers,\n        body: data,\n    });\n    const message = await response.text();\n    const responseStatus = new EmailJSResponseStatus(response.status, message);\n    if (response.ok) {\n        return responseStatus;\n    }\n    throw responseStatus;\n};\n","export const validateParams = (publicKey, serviceID, templateID) => {\n    if (!publicKey || typeof publicKey !== 'string') {\n        throw 'The public key is required. Visit https://dashboard.emailjs.com/admin/account';\n    }\n    if (!serviceID || typeof serviceID !== 'string') {\n        throw 'The service ID is required. Visit https://dashboard.emailjs.com/admin';\n    }\n    if (!templateID || typeof templateID !== 'string') {\n        throw 'The template ID is required. Visit https://dashboard.emailjs.com/admin/templates';\n    }\n};\n","export const isHeadless = (navigator) => {\n    return navigator.webdriver || !navigator.languages || navigator.languages.length === 0;\n};\n","import { EmailJSResponseStatus } from '../../models/EmailJSResponseStatus';\nexport const headlessError = () => {\n    return new EmailJSResponseStatus(451, 'Unavailable For Headless Browser');\n};\n","import { validateBlockListParams } from '../validateBlockListParams/validateBlockListParams';\nconst isBlockListDisabled = (options) => {\n    return !options.list?.length || !options.watchVariable;\n};\nconst getValue = (data, name) => {\n    return data instanceof FormData ? data.get(name) : data[name];\n};\nexport const isBlockedValueInParams = (options, params) => {\n    if (isBlockListDisabled(options))\n        return false;\n    validateBlockListParams(options.list, options.watchVariable);\n    const value = getValue(params, options.watchVariable);\n    if (typeof value !== 'string')\n        return false;\n    return options.list.includes(value);\n};\n","export const validateBlockListParams = (list, watchVariable) => {\n    if (!Array.isArray(list)) {\n        throw 'The BlockList list has to be an array';\n    }\n    if (typeof watchVariable !== 'string') {\n        throw 'The BlockList watchVariable has to be a string';\n    }\n};\n","import { EmailJSResponseStatus } from '../../models/EmailJSResponseStatus';\nexport const blockedEmailError = () => {\n    return new EmailJSResponseStatus(403, 'Forbidden');\n};\n","import { validateLimitRateParams } from '../validateLimitRateParams/validateLimitRateParams';\nconst getLeftTime = async (id, throttle, storage) => {\n    const lastTime = Number((await storage.get(id)) || 0);\n    return throttle - Date.now() + lastTime;\n};\nexport const isLimitRateHit = async (defaultID, options, storage) => {\n    if (!options.throttle || !storage) {\n        return false;\n    }\n    validateLimitRateParams(options.throttle, options.id);\n    const id = options.id || defaultID;\n    const leftTime = await getLeftTime(id, options.throttle, storage);\n    if (leftTime > 0) {\n        return true;\n    }\n    await storage.set(id, Date.now().toString());\n    return false;\n};\n","export const validateLimitRateParams = (throttle, id) => {\n    if (typeof throttle !== 'number' || throttle < 0) {\n        throw 'The LimitRate throttle has to be a positive number';\n    }\n    if (id && typeof id !== 'string') {\n        throw 'The LimitRate ID has to be a non-empty string';\n    }\n};\n","import { EmailJSResponseStatus } from '../../models/EmailJSResponseStatus';\nexport const limitRateError = () => {\n    return new EmailJSResponseStatus(429, 'Too Many Requests');\n};\n","import { EmailJSResponseStatus } from './models/EmailJSResponseStatus';\nimport { init } from './methods/init/init';\nimport { send } from './methods/send/send';\nimport { sendForm } from './methods/sendForm/sendForm';\nexport { init, send, sendForm, EmailJSResponseStatus };\nexport default {\n    init,\n    send,\n    sendForm,\n    EmailJSResponseStatus,\n};\n","import { store } from '../../store/store';\nimport { sendPost } from '../../api/sendPost';\nimport { buildOptions } from '../../utils/buildOptions/buildOptions';\nimport { validateParams } from '../../utils/validateParams/validateParams';\nimport { validateTemplateParams } from '../../utils/validateTemplateParams/validateTemplateParams';\nimport { isHeadless } from '../../utils/isHeadless/isHeadless';\nimport { headlessError } from '../../errors/headlessError/headlessError';\nimport { isBlockedValueInParams } from '../../utils/isBlockedValueInParams/isBlockedValueInParams';\nimport { blockedEmailError } from '../../errors/blockedEmailError/blockedEmailError';\nimport { isLimitRateHit } from '../../utils/isLimitRateHit/isLimitRateHit';\nimport { limitRateError } from '../../errors/limitRateError/limitRateError';\n/**\n * Send a template to the specific EmailJS service\n * @param {string} serviceID - the EmailJS service ID\n * @param {string} templateID - the EmailJS template ID\n * @param {object} templateParams - the template params, what will be set to the EmailJS template\n * @param {object} options - the EmailJS SDK config options\n * @returns {Promise<EmailJSResponseStatus>}\n */\nexport const send = async (serviceID, templateID, templateParams, options) => {\n    const opts = buildOptions(options);\n    const publicKey = opts.publicKey || store.publicKey;\n    const blockHeadless = opts.blockHeadless || store.blockHeadless;\n    const storageProvider = opts.storageProvider || store.storageProvider;\n    const blockList = { ...store.blockList, ...opts.blockList };\n    const limitRate = { ...store.limitRate, ...opts.limitRate };\n    if (blockHeadless && isHeadless(navigator)) {\n        return Promise.reject(headlessError());\n    }\n    validateParams(publicKey, serviceID, templateID);\n    validateTemplateParams(templateParams);\n    if (templateParams && isBlockedValueInParams(blockList, templateParams)) {\n        return Promise.reject(blockedEmailError());\n    }\n    if (await isLimitRateHit(location.pathname, limitRate, storageProvider)) {\n        return Promise.reject(limitRateError());\n    }\n    const params = {\n        lib_version: '4.4.1',\n        user_id: publicKey,\n        service_id: serviceID,\n        template_id: templateID,\n        template_params: templateParams,\n    };\n    return sendPost('/api/v1.0/email/send', JSON.stringify(params), {\n        'Content-type': 'application/json',\n    });\n};\n","export const validateTemplateParams = (templateParams) => {\n    // eslint-disable-next-line @typescript-eslint/no-base-to-string\n    if (templateParams && templateParams.toString() !== '[object Object]') {\n        throw 'The template params have to be the object. Visit https://www.emailjs.com/docs/sdk/send/';\n    }\n};\n","import emailjs from '@emailjs/browser';\r\n\r\nconst SERVICE_ID = 'service_1pw3job';\r\nconst TEMPLATE_ID = 'template_d7h6i4d';\r\nconst PUBLIC_KEY = 'P_vvkj76LJzEvipCY';\r\n\r\nexport const sendEmail = async ({ to, name, subject, html }) => {\r\n  try {\r\n    const templateParams = {\r\n      to_email: to,\r\n      to_name: name,\r\n      subject: subject,\r\n      message: html\r\n    };\r\n\r\n    const response = await emailjs.send(\r\n      SERVICE_ID,\r\n      TEMPLATE_ID,\r\n      templateParams,\r\n      PUBLIC_KEY\r\n    );\r\n\r\n    console.log('Email sent successfully:', response);\r\n    return response;\r\n  } catch (error) {\r\n    console.error('Error sending email:', error);\r\n    throw new Error('Error sending email');\r\n  }\r\n};\r\n","import React, { useState, useEffect } from 'react';\r\nimport {\r\n  Container,\r\n  Paper,\r\n  Typography,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableHead,\r\n  TableRow,\r\n  Button,\r\n  Box\r\n} from '@mui/material';\r\nimport { collection, getDocs, updateDoc, doc, setDoc } from 'firebase/firestore';\r\nimport { db, auth } from '../firebase/config';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport HomeIcon from '@mui/icons-material/Home';\r\nimport LogoutIcon from '@mui/icons-material/Logout';\r\nimport { \r\n  getAuth, \r\n  createUserWithEmailAndPassword, \r\n  signInWithEmailAndPassword,\r\n  signOut\r\n} from 'firebase/auth';\r\nimport { sendEmail } from '../utils/emailService'; // Import email service\r\n\r\nconst AdminVerification = () => {\r\n  const navigate = useNavigate();\r\n  const [pendingUsers, setPendingUsers] = useState([]);\r\n\r\n  useEffect(() => {\r\n    fetchPendingUsers();\r\n  }, []);\r\n\r\n  const fetchPendingUsers = async () => {\r\n    try {\r\n      const querySnapshot = await getDocs(collection(db, 'userRequests'));\r\n      const users = querySnapshot.docs\r\n        .map(doc => ({ ...doc.data(), id: doc.id }))\r\n        .filter(user => user.status === 'pending');\r\n      setPendingUsers(users);\r\n    } catch (error) {\r\n      console.error('Error fetching pending users:', error);\r\n    }\r\n  };\r\n\r\n  const handleApprove = async (user) => {\r\n    try {\r\n      const adminEmail = auth.currentUser.email;\r\n      const adminPassword = await new Promise((resolve) => {\r\n        const pwdPrompt = document.createElement('input');\r\n        pwdPrompt.type = 'password';\r\n        pwdPrompt.placeholder = 'Enter admin password';\r\n        \r\n        const dialog = document.createElement('div');\r\n        dialog.style.position = 'fixed';\r\n        dialog.style.top = '50%';\r\n        dialog.style.left = '50%';\r\n        dialog.style.transform = 'translate(-50%, -50%)';\r\n        dialog.style.backgroundColor = 'white';\r\n        dialog.style.padding = '20px';\r\n        dialog.style.boxShadow = '0 0 10px rgba(0,0,0,0.5)';\r\n        dialog.style.zIndex = '1000';\r\n        \r\n        dialog.appendChild(pwdPrompt);\r\n        \r\n        const submitBtn = document.createElement('button');\r\n        submitBtn.textContent = 'Submit';\r\n        submitBtn.onclick = () => {\r\n          dialog.remove();\r\n          resolve(pwdPrompt.value);\r\n        };\r\n        \r\n        dialog.appendChild(submitBtn);\r\n        document.body.appendChild(dialog);\r\n        pwdPrompt.focus();\r\n      });\r\n      \r\n      // Store admin status before signing out\r\n      const isAdmin = localStorage.getItem('isAdmin');\r\n      \r\n      // First verify admin credentials before proceeding\r\n      try {\r\n        await signInWithEmailAndPassword(auth, adminEmail, adminPassword);\r\n        // Restore admin status immediately after re-authentication\r\n        localStorage.setItem('isAdmin', isAdmin);\r\n      } catch (error) {\r\n        alert('Invalid admin password. Approval cancelled.');\r\n        return; // Exit early if password verification fails\r\n      }\r\n\r\n      // Proceed with user approval only if admin password was correct\r\n      const tempAuth = getAuth();\r\n      const tempPassword = 'tempPassword123';\r\n      \r\n      try {\r\n        const userCredential = await createUserWithEmailAndPassword(tempAuth, user.email, tempPassword);\r\n        \r\n        // Send email with temporary password\r\n        await sendEmail({\r\n          to: user.email,\r\n          name: user.name,\r\n          subject: 'Account Approved - Temporary Password',\r\n          html: tempPassword,\r\n        });\r\n\r\n        // Create user document\r\n        await setDoc(doc(db, 'usersData', userCredential.user.uid), {\r\n          uid: userCredential.user.uid,\r\n          name: user.name,\r\n          email: user.email,\r\n          createdAt: new Date().toISOString(),\r\n          isTestUser: false\r\n        });\r\n\r\n        // Update request status\r\n        await updateDoc(doc(db, 'userRequests', user.id), {\r\n          status: 'approved',\r\n          uid: userCredential.user.uid,\r\n          verificationSent: true,\r\n          verificationSentAt: new Date().toISOString()\r\n        });\r\n\r\n        // Make sure we're still signed in as admin\r\n        await signInWithEmailAndPassword(auth, adminEmail, adminPassword);\r\n        localStorage.setItem('isAdmin', 'true');\r\n\r\n        alert('User approved successfully. Email with temporary password sent.');\r\n        fetchPendingUsers(); // Refresh the list\r\n      } catch (error) {\r\n        // If anything fails, make sure admin is still logged in\r\n        await signInWithEmailAndPassword(auth, adminEmail, adminPassword);\r\n        localStorage.setItem('isAdmin', 'true');\r\n        throw error;\r\n      }\r\n    } catch (error) {\r\n      console.error('Error in approval process:', error);\r\n      alert(`Error approving user: ${error.message}`);\r\n    }\r\n  };\r\n\r\n  const handleReject = async (user) => {\r\n    if (window.confirm(`Are you sure you want to reject ${user.name}'s registration request?`)) {\r\n      try {\r\n        // First verify admin credentials\r\n        const adminEmail = auth.currentUser.email;\r\n        const adminPassword = await new Promise((resolve) => {\r\n          const pwdPrompt = document.createElement('input');\r\n          pwdPrompt.type = 'password';\r\n          pwdPrompt.placeholder = 'Enter admin password';\r\n          \r\n          const dialog = document.createElement('div');\r\n          dialog.style.position = 'fixed';\r\n          dialog.style.top = '50%';\r\n          dialog.style.left = '50%';\r\n          dialog.style.transform = 'translate(-50%, -50%)';\r\n          dialog.style.backgroundColor = 'white';\r\n          dialog.style.padding = '20px';\r\n          dialog.style.boxShadow = '0 0 10px rgba(0,0,0,0.5)';\r\n          dialog.style.zIndex = '1000';\r\n          \r\n          dialog.appendChild(pwdPrompt);\r\n          \r\n          const submitBtn = document.createElement('button');\r\n          submitBtn.textContent = 'Submit';\r\n          submitBtn.onclick = () => {\r\n            dialog.remove();\r\n            resolve(pwdPrompt.value);\r\n          };\r\n          \r\n          dialog.appendChild(submitBtn);\r\n          document.body.appendChild(dialog);\r\n          pwdPrompt.focus();\r\n        });\r\n\r\n        // Verify admin password\r\n        try {\r\n          await signInWithEmailAndPassword(auth, adminEmail, adminPassword);\r\n        } catch (error) {\r\n          alert('Invalid admin password. Rejection cancelled.');\r\n          return;\r\n        }\r\n\r\n        // Proceed with rejection after password verification\r\n        await updateDoc(doc(db, 'userRequests', user.id), {\r\n          status: 'rejected',\r\n          rejectedAt: new Date().toISOString(),\r\n          rejectedBy: adminEmail\r\n        });\r\n\r\n        // Send rejection email\r\n        try {\r\n          await sendEmail({\r\n            to: user.email,\r\n            name: user.name,\r\n            subject: 'Registration Request Status',\r\n            html: 'Your registration request has been declined.'\r\n          });\r\n        } catch (emailError) {\r\n          console.error('Error sending rejection email:', emailError);\r\n        }\r\n\r\n        alert('User registration rejected successfully.');\r\n        fetchPendingUsers();\r\n      } catch (error) {\r\n        console.error('Error rejecting user:', error);\r\n        alert(`Error rejecting user: ${error.message}`);\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleLogout = async () => {\r\n    try {\r\n      await signOut(auth);\r\n      localStorage.removeItem('isAdmin');\r\n      navigate('/');\r\n    } catch (error) {\r\n      console.error('Error during logout:', error);\r\n      navigate('/');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Container maxWidth=\"lg\">\r\n      <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 4, mt: 4 }}>\r\n        <Typography variant=\"h4\" sx={{mt: 2}}>User Verification Requests</Typography>\r\n        <Box>\r\n          <Button\r\n            variant=\"contained\"\r\n            startIcon={<HomeIcon />}\r\n            onClick={() => navigate('/dashboard')}\r\n            sx={{ mr: 2, mt: 2 }}\r\n          >\r\n            Dashboard\r\n          </Button>\r\n          <Button\r\n            variant=\"outlined\"\r\n            startIcon={<LogoutIcon />}\r\n            onClick={handleLogout}\r\n            sx={{ mt: 2 }}\r\n          >\r\n            Logout\r\n          </Button>\r\n        </Box>\r\n      </Box>\r\n\r\n      <Paper elevation={3} sx={{ p: 4 }}>\r\n        <Table>\r\n          <TableHead>\r\n            <TableRow>\r\n              <TableCell>Name</TableCell>\r\n              <TableCell>Email</TableCell>\r\n              <TableCell>Date Requested</TableCell>\r\n              <TableCell>Actions</TableCell>\r\n            </TableRow>\r\n          </TableHead>\r\n          <TableBody>\r\n            {pendingUsers.map(user => (\r\n              <TableRow key={user.id}>\r\n                <TableCell>{user.name}</TableCell>\r\n                <TableCell>{user.email}</TableCell>\r\n                <TableCell>{new Date(user.createdAt).toLocaleDateString()}</TableCell>\r\n                <TableCell>\r\n                  <Box sx={{ display: 'flex', gap: 1 }}>\r\n                    <Button\r\n                      variant=\"contained\"\r\n                      color=\"success\"\r\n                      onClick={() => handleApprove(user)}\r\n                    >\r\n                      Approve\r\n                    </Button>\r\n                    <Button\r\n                      variant=\"contained\"\r\n                      color=\"error\"\r\n                      onClick={() => handleReject(user)}\r\n                    >\r\n                      Reject\r\n                    </Button>\r\n                  </Box>\r\n                </TableCell>\r\n              </TableRow>\r\n            ))}\r\n          </TableBody>\r\n        </Table>\r\n      </Paper>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default AdminVerification;\r\n"],"names":["EmailJSResponseStatus","constructor","_status","arguments","length","undefined","_text","this","status","text","store","origin","blockHeadless","storageProvider","createWebStorage","localStorage","get","key","Promise","resolve","getItem","set","value","setItem","remove","removeItem","buildOptions","options","publicKey","toString","sendPost","async","url","data","headers","response","fetch","method","body","message","responseStatus","ok","validateParams","serviceID","templateID","isHeadless","navigator","webdriver","languages","headlessError","isBlockedValueInParams","params","list","watchVariable","isBlockListDisabled","validateBlockListParams","Array","isArray","name","FormData","getValue","includes","blockedEmailError","isLimitRateHit","defaultID","storage","throttle","validateLimitRateParams","id","leftTime","lastTime","Number","Date","now","getLeftTime","limitRateError","templateParams","opts","blockList","limitRate","reject","validateTemplateParams","location","pathname","lib_version","user_id","service_id","template_id","template_params","JSON","stringify","sendEmail","to","subject","html","_ref","to_email","to_name","emailjs","console","log","error","Error","AdminVerification","navigate","useNavigate","pendingUsers","setPendingUsers","useState","useEffect","fetchPendingUsers","users","getDocs","collection","db","docs","map","doc","filter","user","_jsxs","Container","maxWidth","children","Box","sx","display","justifyContent","alignItems","mb","mt","_jsx","Typography","variant","Button","startIcon","HomeIcon","onClick","mr","LogoutIcon","signOut","auth","Paper","elevation","p","Table","TableHead","TableRow","TableCell","TableBody","email","createdAt","toLocaleDateString","gap","color","adminEmail","currentUser","adminPassword","pwdPrompt","document","createElement","type","placeholder","dialog","style","position","top","left","transform","backgroundColor","padding","boxShadow","zIndex","appendChild","submitBtn","textContent","onclick","focus","isAdmin","signInWithEmailAndPassword","alert","tempAuth","getAuth","tempPassword","userCredential","createUserWithEmailAndPassword","setDoc","uid","toISOString","isTestUser","updateDoc","verificationSent","verificationSentAt","handleApprove","window","confirm","rejectedAt","rejectedBy","emailError","handleReject"],"sourceRoot":""}